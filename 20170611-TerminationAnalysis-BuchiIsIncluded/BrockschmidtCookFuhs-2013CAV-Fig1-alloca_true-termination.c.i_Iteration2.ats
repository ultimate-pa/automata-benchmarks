// Testfile dumped by Ultimate at 2017/06/12 01:03:50
//
// 

FiniteAutomaton inclusionLHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 },
	initialStates = {s16 },
	finalStates = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 },
	transitions = {
		(s0 a19 s1)
		(s0 a20 s2)
		(s1 a2 s7)
		(s2 a21 s15)
		(s3 a23 s4)
		(s4 a16 s12)
		(s5 a10 s6)
		(s6 a14 s11)
		(s7 a4 s10)
		(s8 a3 s9)
		(s9 a6 s14)
		(s10 a5 s9)
		(s11 a15 s4)
		(s12 a17 s13)
		(s13 a18 s0)
		(s14 a8 s5)
		(s15 a22 s3)
		(s16 a1 s8)
	}
);
// Testfile dumped by Ultimate at 2017/06/12 01:03:53
//
// RefinementSetting [mInterpolantAutomaton=ScroogeNondeterminism, mBouncerStem=false, mBouncerLoop=false, mScroogeNondeterminismStem=true, mScroogeNondeterminismLoop=false, mCannibalizeLoop=true]

FiniteAutomaton inclusionRHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 s27 s28 s29 s30 s31 s32 s33 s34 },
	initialStates = {s14 },
	finalStates = {s0 s9 s12 s17 s26 },
	transitions = {
		(s0 a16 s2)
		(s1 a18 s19)
		(s2 a17 s20)
		(s2 a21 s2)
		(s2 a22 s18)
		(s3 a18 s21)
		(s4 a18 s28)
		(s5 a16 s5)
		(s5 a17 s23)
		(s5 a21 s5)
		(s5 a22 s27)
		(s6 a19 s31)
		(s6 a20 s2)
		(s7 a19 s31)
		(s7 a20 s11)
		(s8 a19 s33)
		(s8 a20 s5)
		(s9 a19 s16)
		(s9 a20 s16)
		(s10 a19 s16)
		(s10 a20 s16)
		(s11 a16 s11)
		(s11 a17 s22)
		(s11 a21 s11)
		(s11 a22 s18)
		(s12 a5 s13)
		(s13 a16 s13)
		(s13 a17 s1)
		(s13 a6 s13)
		(s13 a8 s13)
		(s13 a10 s13)
		(s13 a21 s13)
		(s13 a22 s18)
		(s13 a14 s13)
		(s13 a15 s13)
		(s14 a1 s14)
		(s14 a1 s17)
		(s14 a3 s14)
		(s14 a3 s17)
		(s14 a2 s14)
		(s14 a2 s26)
		(s14 a4 s14)
		(s14 a4 s17)
		(s14 a5 s14)
		(s14 a5 s17)
		(s14 a6 s14)
		(s14 a6 s17)
		(s14 a8 s14)
		(s14 a8 s17)
		(s14 a10 s14)
		(s14 a10 s17)
		(s14 a14 s14)
		(s14 a14 s17)
		(s14 a15 s0)
		(s14 a15 s14)
		(s14 a16 s14)
		(s14 a16 s17)
		(s14 a17 s14)
		(s14 a17 s17)
		(s14 a18 s9)
		(s14 a18 s14)
		(s14 a19 s14)
		(s14 a19 s17)
		(s14 a20 s14)
		(s14 a20 s17)
		(s14 a21 s14)
		(s14 a21 s17)
		(s14 a22 s14)
		(s14 a22 s17)
		(s14 a23 s14)
		(s14 a23 s17)
		(s15 a16 s15)
		(s15 a5 s15)
		(s15 a17 s3)
		(s15 a6 s15)
		(s15 a8 s15)
		(s15 a10 s15)
		(s15 a21 s15)
		(s15 a22 s27)
		(s15 a14 s15)
		(s15 a15 s15)
		(s16 a2 s29)
		(s16 a16 s16)
		(s16 a17 s16)
		(s16 a18 s10)
		(s16 a6 s16)
		(s16 a8 s16)
		(s16 a10 s16)
		(s16 a21 s16)
		(s16 a22 s18)
		(s16 a14 s16)
		(s16 a15 s11)
		(s17 a3 s27)
		(s17 a2 s29)
		(s17 a5 s16)
		(s17 a6 s16)
		(s17 a8 s16)
		(s17 a10 s16)
		(s17 a14 s16)
		(s17 a15 s11)
		(s17 a16 s16)
		(s17 a17 s16)
		(s17 a18 s10)
		(s17 a21 s16)
		(s17 a22 s18)
		(s17 a23 s16)
		(s18 a16 s18)
		(s18 a17 s4)
		(s18 a21 s18)
		(s18 a22 s18)
		(s18 a23 s18)
		(s19 a19 s31)
		(s19 a20 s13)
		(s20 a18 s6)
		(s21 a19 s33)
		(s21 a20 s15)
		(s22 a18 s7)
		(s23 a18 s8)
		(s24 a4 s12)
		(s25 a4 s15)
		(s26 a4 s34)
		(s27 a2 s32)
		(s27 a5 s27)
		(s27 a6 s27)
		(s27 a8 s27)
		(s27 a10 s27)
		(s27 a14 s27)
		(s27 a15 s5)
		(s27 a16 s27)
		(s27 a17 s27)
		(s27 a18 s30)
		(s27 a21 s27)
		(s27 a22 s27)
		(s27 a23 s27)
		(s28 a19 s16)
		(s28 a20 s18)
		(s29 a4 s34)
		(s30 a19 s27)
		(s30 a20 s27)
		(s31 a2 s24)
		(s32 a4 s27)
		(s33 a2 s25)
		(s34 a5 s34)
		(s34 a6 s34)
		(s34 a8 s34)
		(s34 a10 s34)
		(s34 a14 s34)
		(s34 a15 s11)
	}
);
