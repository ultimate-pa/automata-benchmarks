// Testfile dumped by Ultimate at 2017/06/11 23:20:34
//
// 

FiniteAutomaton inclusionLHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 },
	initialStates = {s19 },
	finalStates = {s12 s19 s20 },
	transitions = {
		(s0 a12 s4)
		(s0 a12 s12)
		(s0 a12 s16)
		(s1 a16 s2)
		(s2 a2 s15)
		(s3 a16 s10)
		(s3 a17 s9)
		(s4 a13 s17)
		(s5 a12 s4)
		(s6 a2 s5)
		(s7 a16 s6)
		(s8 a15 s1)
		(s8 a15 s7)
		(s9 a15 s1)
		(s9 a15 s3)
		(s9 a15 s7)
		(s10 a2 s11)
		(s11 a12 s14)
		(s12 a14 s13)
		(s13 a15 s3)
		(s14 a14 s13)
		(s15 a12 s16)
		(s16 a14 s8)
		(s17 a5 s18)
		(s18 a3 s21)
		(s19 a0 s20)
		(s20 a3 s21)
		(s21 a9 s0)
	}
);
// Testfile dumped by Ultimate at 2017/06/11 23:20:38
//
// RefinementSetting [mInterpolantAutomaton=ScroogeNondeterminism, mBouncerStem=false, mBouncerLoop=false, mScroogeNondeterminismStem=true, mScroogeNondeterminismLoop=false, mCannibalizeLoop=true]

FiniteAutomaton inclusionRHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 s23 s24 s25 },
	initialStates = {s19 },
	finalStates = {s21 },
	transitions = {
		(s0 a2 s12)
		(s0 a13 s0)
		(s0 a14 s12)
		(s0 a3 s0)
		(s0 a5 s24)
		(s0 a15 s0)
		(s0 a9 s8)
		(s0 a16 s0)
		(s0 a17 s9)
		(s0 a12 s0)
		(s1 a13 s1)
		(s1 a14 s8)
		(s1 a12 s1)
		(s2 a2 s5)
		(s2 a15 s2)
		(s2 a16 s2)
		(s2 a17 s5)
		(s3 a13 s3)
		(s3 a14 s21)
		(s3 a5 s22)
		(s3 a12 s3)
		(s4 a13 s4)
		(s4 a14 s21)
		(s4 a5 s6)
		(s4 a12 s4)
		(s5 a2 s5)
		(s5 a13 s5)
		(s5 a14 s5)
		(s5 a5 s17)
		(s5 a15 s5)
		(s5 a16 s5)
		(s5 a17 s5)
		(s5 a12 s5)
		(s6 a3 s6)
		(s6 a9 s3)
		(s7 a2 s7)
		(s7 a13 s7)
		(s7 a14 s7)
		(s7 a5 s21)
		(s7 a15 s7)
		(s7 a16 s7)
		(s7 a17 s7)
		(s7 a12 s7)
		(s8 a2 s15)
		(s8 a13 s8)
		(s8 a14 s15)
		(s8 a5 s20)
		(s8 a15 s8)
		(s8 a16 s8)
		(s8 a17 s10)
		(s8 a12 s8)
		(s9 a2 s14)
		(s9 a15 s9)
		(s9 a16 s9)
		(s9 a17 s5)
		(s10 a2 s16)
		(s10 a15 s10)
		(s10 a16 s10)
		(s10 a17 s7)
		(s11 a2 s13)
		(s11 a13 s11)
		(s11 a14 s10)
		(s11 a5 s12)
		(s11 a15 s11)
		(s11 a16 s11)
		(s11 a17 s23)
		(s11 a12 s11)
		(s12 a2 s18)
		(s12 a13 s12)
		(s12 a14 s9)
		(s12 a3 s12)
		(s12 a5 s24)
		(s12 a15 s12)
		(s12 a9 s15)
		(s12 a16 s12)
		(s12 a12 s12)
		(s12 a17 s2)
		(s13 a13 s13)
		(s13 a14 s16)
		(s13 a5 s18)
		(s13 a12 s13)
		(s14 a13 s14)
		(s14 a14 s5)
		(s14 a5 s17)
		(s14 a12 s14)
		(s15 a13 s15)
		(s15 a2 s11)
		(s15 a14 s11)
		(s15 a5 s0)
		(s15 a15 s15)
		(s15 a16 s15)
		(s15 a12 s15)
		(s15 a17 s16)
		(s16 a13 s16)
		(s16 a2 s16)
		(s16 a14 s23)
		(s16 a5 s21)
		(s16 a15 s16)
		(s16 a16 s16)
		(s16 a12 s16)
		(s16 a17 s7)
		(s17 a3 s17)
		(s17 a9 s21)
		(s18 a13 s18)
		(s18 a14 s2)
		(s18 a3 s18)
		(s18 a5 s24)
		(s18 a9 s11)
		(s18 a12 s18)
		(s19 a0 s21)
		(s19 a0 s19)
		(s19 a13 s21)
		(s19 a13 s19)
		(s19 a2 s21)
		(s19 a2 s19)
		(s19 a3 s21)
		(s19 a3 s19)
		(s19 a14 s21)
		(s19 a14 s19)
		(s19 a5 s21)
		(s19 a5 s19)
		(s19 a15 s21)
		(s19 a15 s19)
		(s19 a9 s21)
		(s19 a9 s19)
		(s19 a16 s21)
		(s19 a16 s19)
		(s19 a12 s21)
		(s19 a12 s19)
		(s19 a17 s21)
		(s19 a17 s19)
		(s20 a13 s20)
		(s20 a2 s0)
		(s20 a14 s0)
		(s20 a3 s20)
		(s20 a5 s25)
		(s20 a9 s1)
		(s20 a16 s20)
		(s20 a17 s12)
		(s21 a13 s20)
		(s21 a2 s0)
		(s21 a3 s20)
		(s21 a14 s0)
		(s21 a5 s25)
		(s21 a15 s20)
		(s21 a9 s1)
		(s21 a16 s20)
		(s21 a12 s20)
		(s21 a17 s12)
		(s22 a3 s22)
		(s22 a9 s3)
		(s23 a2 s23)
		(s23 a13 s23)
		(s23 a14 s23)
		(s23 a5 s21)
		(s23 a15 s23)
		(s23 a16 s23)
		(s23 a17 s7)
		(s23 a12 s23)
		(s24 a3 s24)
		(s24 a9 s3)
		(s25 a3 s25)
		(s25 a9 s4)
	}
);
