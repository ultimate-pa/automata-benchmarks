// Testfile dumped by Ultimate at 2017/06/11 23:19:06
//
// 

FiniteAutomaton inclusionLHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 a28 a29 a30 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 },
	initialStates = {s15 },
	finalStates = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 },
	transitions = {
		(s0 a10 s1)
		(s1 a11 s7)
		(s2 a15 s3)
		(s3 a16 s10)
		(s4 a1 s5)
		(s5 a2 s6)
		(s5 a3 s6)
		(s6 a4 s11)
		(s6 a5 s11)
		(s7 a12 s8)
		(s8 a13 s9)
		(s9 a14 s2)
		(s10 a19 s0)
		(s11 a6 s12)
		(s12 a7 s13)
		(s13 a8 s14)
		(s14 a9 s0)
		(s15 a0 s4)
	}
);
// Testfile dumped by Ultimate at 2017/06/11 23:19:07
//
// RefinementSetting [mInterpolantAutomaton=ScroogeNondeterminism, mBouncerStem=false, mBouncerLoop=false, mScroogeNondeterminismStem=true, mScroogeNondeterminismLoop=false, mCannibalizeLoop=true]

FiniteAutomaton inclusionRHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 a28 a29 a30 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 },
	initialStates = {s11 },
	finalStates = {s3 s8 s10 s13 },
	transitions = {
		(s0 a19 s1)
		(s0 a16 s0)
		(s1 a10 s1)
		(s1 a11 s1)
		(s1 a12 s1)
		(s1 a13 s1)
		(s1 a14 s1)
		(s1 a15 s0)
		(s2 a19 s3)
		(s2 a16 s2)
		(s3 a10 s4)
		(s4 a11 s4)
		(s4 a12 s4)
		(s4 a13 s4)
		(s4 a14 s4)
		(s4 a15 s2)
		(s5 a8 s5)
		(s5 a2 s5)
		(s5 a3 s5)
		(s5 a11 s5)
		(s5 a12 s5)
		(s5 a4 s5)
		(s5 a13 s5)
		(s5 a5 s5)
		(s5 a14 s5)
		(s5 a15 s7)
		(s6 a7 s6)
		(s6 a7 s13)
		(s6 a8 s6)
		(s6 a8 s13)
		(s6 a9 s6)
		(s6 a9 s8)
		(s6 a10 s6)
		(s6 a10 s13)
		(s6 a19 s6)
		(s6 a19 s13)
		(s6 a11 s6)
		(s6 a11 s13)
		(s6 a12 s6)
		(s6 a12 s13)
		(s6 a13 s6)
		(s6 a13 s13)
		(s6 a14 s6)
		(s6 a14 s13)
		(s6 a15 s10)
		(s6 a15 s6)
		(s6 a16 s6)
		(s6 a16 s13)
		(s7 a19 s1)
		(s7 a16 s7)
		(s8 a10 s12)
		(s9 a10 s9)
		(s9 a11 s9)
		(s9 a12 s9)
		(s9 a13 s9)
		(s9 a14 s9)
		(s9 a15 s14)
		(s10 a16 s7)
		(s11 a0 s11)
		(s11 a0 s13)
		(s11 a1 s11)
		(s11 a1 s13)
		(s11 a2 s11)
		(s11 a2 s13)
		(s11 a3 s11)
		(s11 a3 s13)
		(s11 a4 s11)
		(s11 a4 s13)
		(s11 a5 s11)
		(s11 a5 s13)
		(s11 a6 s6)
		(s11 a6 s13)
		(s12 a11 s12)
		(s12 a12 s12)
		(s12 a13 s12)
		(s12 a14 s12)
		(s12 a15 s2)
		(s13 a1 s5)
		(s13 a2 s5)
		(s13 a3 s5)
		(s13 a19 s9)
		(s13 a4 s5)
		(s13 a5 s5)
		(s13 a7 s5)
		(s13 a8 s5)
		(s13 a10 s5)
		(s13 a11 s5)
		(s13 a12 s5)
		(s13 a13 s5)
		(s13 a14 s5)
		(s13 a15 s7)
		(s14 a19 s1)
		(s14 a16 s14)
	}
);
