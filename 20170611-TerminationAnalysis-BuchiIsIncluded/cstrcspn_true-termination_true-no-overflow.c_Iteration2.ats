// Testfile dumped by Ultimate at 2017/06/12 00:01:43
//
// 

FiniteAutomaton inclusionLHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 a28 a29 a30 a31 a32 a33 a34 a35 a36 a37 a38 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 },
	initialStates = {s26 },
	finalStates = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 },
	transitions = {
		(s0 a10 s1)
		(s1 a12 s3)
		(s2 a8 s0)
		(s3 a14 s4)
		(s4 a15 s17)
		(s4 a16 s17)
		(s5 a27 s6)
		(s6 a28 s12)
		(s7 a1 s8)
		(s8 a3 s18)
		(s9 a18 s10)
		(s10 a19 s11)
		(s11 a20 s18)
		(s12 a29 s13)
		(s13 a33 s20)
		(s13 a30 s15)
		(s14 a4 s2)
		(s14 a7 s2)
		(s15 a31 s16)
		(s16 a32 s20)
		(s17 a17 s9)
		(s18 a21 s19)
		(s19 a22 s22)
		(s20 a34 s21)
		(s20 a35 s5)
		(s21 a37 s7)
		(s22 a24 s24)
		(s23 a2 s14)
		(s24 a25 s25)
		(s25 a26 s5)
		(s26 a0 s23)
	}
);
// Testfile dumped by Ultimate at 2017/06/12 00:01:44
//
// RefinementSetting [mInterpolantAutomaton=ScroogeNondeterminism, mBouncerStem=false, mBouncerLoop=false, mScroogeNondeterminismStem=true, mScroogeNondeterminismLoop=false, mCannibalizeLoop=true]

FiniteAutomaton inclusionRHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 a28 a29 a30 a31 a32 a33 a34 a35 a36 a37 a38 },
	states = {s0 s1 s2 s3 s4 s5 },
	initialStates = {s1 },
	finalStates = {s4 s5 },
	transitions = {
		(s0 a1 s0)
		(s0 a24 s0)
		(s0 a25 s0)
		(s0 a3 s5)
		(s0 a26 s0)
		(s0 a27 s0)
		(s0 a28 s0)
		(s0 a29 s0)
		(s0 a30 s0)
		(s0 a31 s0)
		(s0 a32 s0)
		(s0 a33 s0)
		(s0 a34 s0)
		(s0 a35 s0)
		(s0 a37 s0)
		(s1 a0 s1)
		(s1 a0 s5)
		(s1 a1 s1)
		(s1 a1 s5)
		(s1 a2 s1)
		(s1 a2 s5)
		(s1 a3 s1)
		(s1 a3 s5)
		(s1 a4 s1)
		(s1 a4 s5)
		(s1 a7 s1)
		(s1 a7 s5)
		(s1 a8 s1)
		(s1 a8 s5)
		(s1 a10 s1)
		(s1 a10 s5)
		(s1 a12 s1)
		(s1 a12 s5)
		(s1 a14 s1)
		(s1 a14 s5)
		(s1 a15 s1)
		(s1 a15 s5)
		(s1 a16 s1)
		(s1 a16 s5)
		(s1 a17 s1)
		(s1 a17 s5)
		(s1 a18 s1)
		(s1 a18 s5)
		(s1 a19 s1)
		(s1 a19 s5)
		(s1 a20 s1)
		(s1 a20 s5)
		(s1 a21 s1)
		(s1 a21 s5)
		(s1 a22 s1)
		(s1 a22 s4)
		(s1 a24 s1)
		(s1 a24 s5)
		(s1 a25 s1)
		(s1 a25 s4)
		(s1 a26 s1)
		(s1 a26 s5)
		(s1 a27 s1)
		(s1 a27 s5)
		(s1 a28 s1)
		(s1 a28 s5)
		(s1 a29 s1)
		(s1 a29 s5)
		(s1 a30 s1)
		(s1 a30 s5)
		(s1 a31 s1)
		(s1 a31 s5)
		(s1 a32 s1)
		(s1 a32 s5)
		(s1 a33 s1)
		(s1 a33 s5)
		(s1 a34 s1)
		(s1 a34 s5)
		(s1 a35 s1)
		(s1 a35 s5)
		(s1 a37 s1)
		(s1 a37 s5)
		(s2 a21 s2)
		(s2 a22 s4)
		(s3 a1 s3)
		(s3 a3 s2)
		(s3 a4 s3)
		(s3 a7 s3)
		(s3 a27 s3)
		(s3 a28 s3)
		(s3 a12 s3)
		(s3 a29 s3)
		(s3 a14 s3)
		(s3 a30 s3)
		(s3 a31 s3)
		(s3 a15 s3)
		(s3 a32 s3)
		(s3 a16 s3)
		(s3 a33 s3)
		(s3 a19 s3)
		(s3 a34 s3)
		(s3 a35 s3)
		(s3 a37 s3)
		(s3 a22 s0)
		(s4 a24 s0)
		(s4 a26 s0)
		(s5 a1 s3)
		(s5 a2 s3)
		(s5 a3 s2)
		(s5 a4 s3)
		(s5 a7 s3)
		(s5 a10 s3)
		(s5 a12 s3)
		(s5 a14 s3)
		(s5 a15 s3)
		(s5 a16 s3)
		(s5 a18 s3)
		(s5 a19 s3)
		(s5 a21 s3)
		(s5 a22 s0)
		(s5 a25 s0)
		(s5 a27 s3)
		(s5 a28 s3)
		(s5 a29 s3)
		(s5 a30 s3)
		(s5 a31 s3)
		(s5 a32 s3)
		(s5 a33 s3)
		(s5 a34 s3)
		(s5 a35 s3)
		(s5 a37 s3)
	}
);
