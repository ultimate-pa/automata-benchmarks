// Testfile dumped by Ultimate at 2017/06/11 23:19:23
//
// 

FiniteAutomaton inclusionLHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 a28 a29 a30 a31 a32 a33 a34 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 },
	initialStates = {s9 },
	finalStates = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 },
	transitions = {
		(s0 a11 s4)
		(s1 a2 s17)
		(s2 a20 s19)
		(s3 a30 s10)
		(s4 a12 s7)
		(s5 a15 s6)
		(s6 a17 s15)
		(s7 a13 s8)
		(s8 a14 s5)
		(s9 a0 s1)
		(s10 a32 s11)
		(s11 a33 s8)
		(s12 a25 s13)
		(s13 a27 s3)
		(s13 a28 s2)
		(s14 a24 s12)
		(s15 a18 s16)
		(s16 a19 s2)
		(s17 a5 s18)
		(s17 a7 s18)
		(s18 a8 s22)
		(s18 a9 s22)
		(s19 a21 s20)
		(s20 a22 s21)
		(s21 a23 s14)
		(s21 a26 s13)
		(s22 a10 s0)
	}
);
// Testfile dumped by Ultimate at 2017/06/11 23:19:24
//
// RefinementSetting [mInterpolantAutomaton=ScroogeNondeterminism, mBouncerStem=false, mBouncerLoop=false, mScroogeNondeterminismStem=true, mScroogeNondeterminismLoop=false, mCannibalizeLoop=true]

FiniteAutomaton inclusionRHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 a28 a29 a30 a31 a32 a33 a34 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 },
	initialStates = {s7 },
	finalStates = {s0 s1 s3 },
	transitions = {
		(s0 a17 s10)
		(s0 a19 s10)
		(s1 a20 s8)
		(s1 a21 s8)
		(s1 a22 s8)
		(s1 a23 s8)
		(s1 a24 s8)
		(s1 a25 s8)
		(s1 a26 s8)
		(s1 a11 s8)
		(s1 a27 s8)
		(s1 a12 s8)
		(s1 a13 s6)
		(s1 a28 s8)
		(s1 a14 s8)
		(s1 a30 s8)
		(s1 a15 s10)
		(s1 a32 s8)
		(s1 a18 s10)
		(s1 a33 s2)
		(s2 a14 s2)
		(s2 a15 s0)
		(s3 a5 s9)
		(s3 a7 s9)
		(s3 a8 s9)
		(s3 a9 s9)
		(s4 a20 s1)
		(s4 a20 s4)
		(s4 a21 s1)
		(s4 a21 s4)
		(s4 a22 s1)
		(s4 a22 s4)
		(s4 a23 s1)
		(s4 a23 s4)
		(s4 a24 s1)
		(s4 a24 s4)
		(s4 a25 s1)
		(s4 a25 s4)
		(s4 a26 s1)
		(s4 a26 s4)
		(s4 a11 s1)
		(s4 a11 s4)
		(s4 a27 s1)
		(s4 a27 s4)
		(s4 a12 s1)
		(s4 a12 s4)
		(s4 a13 s1)
		(s4 a13 s4)
		(s4 a28 s1)
		(s4 a28 s4)
		(s4 a14 s1)
		(s4 a14 s4)
		(s4 a30 s1)
		(s4 a30 s4)
		(s4 a15 s0)
		(s4 a15 s4)
		(s4 a32 s1)
		(s4 a32 s4)
		(s4 a17 s1)
		(s4 a17 s4)
		(s4 a18 s0)
		(s4 a18 s4)
		(s4 a33 s1)
		(s4 a33 s4)
		(s4 a19 s1)
		(s4 a19 s4)
		(s5 a8 s3)
		(s5 a8 s5)
		(s5 a9 s3)
		(s5 a9 s5)
		(s5 a10 s1)
		(s5 a10 s4)
		(s6 a14 s6)
		(s6 a15 s11)
		(s7 a0 s3)
		(s7 a0 s7)
		(s7 a2 s3)
		(s7 a2 s7)
		(s7 a5 s3)
		(s7 a5 s5)
		(s7 a7 s3)
		(s7 a7 s5)
		(s8 a20 s8)
		(s8 a21 s8)
		(s8 a22 s8)
		(s8 a23 s8)
		(s8 a24 s8)
		(s8 a25 s8)
		(s8 a26 s8)
		(s8 a27 s8)
		(s8 a12 s8)
		(s8 a13 s6)
		(s8 a28 s8)
		(s8 a30 s8)
		(s8 a15 s10)
		(s8 a32 s8)
		(s8 a33 s2)
		(s9 a8 s9)
		(s9 a9 s9)
		(s10 a20 s10)
		(s10 a21 s10)
		(s10 a22 s10)
		(s10 a23 s10)
		(s10 a24 s10)
		(s10 a25 s10)
		(s10 a26 s10)
		(s10 a27 s10)
		(s10 a28 s10)
		(s10 a30 s10)
		(s10 a32 s10)
		(s10 a17 s10)
		(s10 a18 s10)
		(s10 a33 s1)
		(s10 a19 s10)
		(s11 a20 s11)
		(s11 a21 s11)
		(s11 a22 s11)
		(s11 a23 s11)
		(s11 a24 s11)
		(s11 a25 s11)
		(s11 a26 s11)
		(s11 a27 s11)
		(s11 a28 s11)
		(s11 a30 s11)
		(s11 a32 s11)
		(s11 a17 s11)
		(s11 a18 s11)
		(s11 a33 s6)
		(s11 a19 s11)
	}
);
