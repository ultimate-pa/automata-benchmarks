// Testfile dumped by Ultimate at 2017/06/12 01:32:11
//
// 

FiniteAutomaton inclusionLHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 a28 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 },
	initialStates = {s17 },
	finalStates = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 },
	transitions = {
		(s0 a16 s1)
		(s1 a17 s6)
		(s2 a11 s3)
		(s3 a12 s18)
		(s4 a7 s5)
		(s5 a8 s12)
		(s6 a18 s13)
		(s7 a1 s8)
		(s8 a2 s16)
		(s9 a6 s4)
		(s10 a4 s11)
		(s11 a5 s9)
		(s12 a9 s14)
		(s13 a19 s15)
		(s14 a10 s2)
		(s15 a20 s19)
		(s16 a3 s10)
		(s17 a0 s7)
		(s18 a13 s0)
		(s19 a21 s20)
		(s20 a22 s9)
	}
);
// Testfile dumped by Ultimate at 2017/06/12 01:33:47
//
// RefinementSetting [mInterpolantAutomaton=ScroogeNondeterminism, mBouncerStem=false, mBouncerLoop=true, mScroogeNondeterminismStem=true, mScroogeNondeterminismLoop=false, mCannibalizeLoop=false]

FiniteAutomaton inclusionRHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 a28 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 },
	initialStates = {s8 },
	finalStates = {s13 },
	transitions = {
		(s0 a22 s13)
		(s1 a13 s3)
		(s2 a10 s4)
		(s3 a16 s5)
		(s4 a11 s12)
		(s5 a17 s7)
		(s6 a8 s9)
		(s7 a18 s10)
		(s8 a0 s8)
		(s8 a0 s13)
		(s8 a20 s8)
		(s8 a20 s13)
		(s8 a21 s8)
		(s8 a21 s13)
		(s8 a1 s8)
		(s8 a1 s13)
		(s8 a22 s8)
		(s8 a22 s13)
		(s8 a2 s8)
		(s8 a2 s13)
		(s8 a3 s8)
		(s8 a3 s13)
		(s8 a4 s8)
		(s8 a4 s13)
		(s8 a5 s8)
		(s8 a5 s13)
		(s8 a6 s8)
		(s8 a6 s13)
		(s8 a7 s8)
		(s8 a7 s13)
		(s8 a8 s8)
		(s8 a8 s13)
		(s8 a9 s8)
		(s8 a9 s13)
		(s8 a10 s8)
		(s8 a10 s13)
		(s8 a11 s8)
		(s8 a11 s13)
		(s8 a12 s8)
		(s8 a12 s13)
		(s8 a13 s8)
		(s8 a13 s13)
		(s8 a16 s8)
		(s8 a16 s13)
		(s8 a17 s8)
		(s8 a17 s13)
		(s8 a18 s8)
		(s8 a18 s13)
		(s8 a19 s8)
		(s8 a19 s13)
		(s9 a9 s2)
		(s10 a20 s14)
		(s10 a19 s10)
		(s11 a20 s11)
		(s11 a10 s11)
		(s11 a11 s11)
		(s11 a12 s11)
		(s11 a13 s11)
		(s11 a6 s11)
		(s11 a7 s6)
		(s11 a16 s11)
		(s11 a17 s11)
		(s11 a9 s11)
		(s12 a12 s1)
		(s13 a20 s11)
		(s13 a22 s11)
		(s13 a6 s11)
		(s13 a7 s6)
		(s13 a8 s11)
		(s13 a9 s11)
		(s13 a10 s11)
		(s13 a11 s11)
		(s13 a12 s11)
		(s13 a13 s11)
		(s13 a16 s11)
		(s13 a17 s11)
		(s13 a19 s11)
		(s14 a21 s0)
	}
);
