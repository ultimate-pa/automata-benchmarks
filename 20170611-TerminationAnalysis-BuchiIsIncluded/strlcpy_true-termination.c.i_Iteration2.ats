// Testfile dumped by Ultimate at 2017/06/12 01:02:33
//
// 

FiniteAutomaton inclusionLHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 a28 a29 a30 a31 a32 a33 a34 a35 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 },
	initialStates = {s5 },
	finalStates = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 },
	transitions = {
		(s0 a7 s1)
		(s1 a9 s8)
		(s2 a20 s17)
		(s3 a31 s14)
		(s4 a24 s10)
		(s5 a0 s20)
		(s6 a34 s7)
		(s7 a35 s13)
		(s8 a13 s9)
		(s9 a16 s19)
		(s9 a17 s16)
		(s10 a25 s11)
		(s10 a26 s12)
		(s11 a29 s15)
		(s12 a19 s2)
		(s13 a3 s14)
		(s14 a33 s6)
		(s15 a30 s3)
		(s15 a32 s14)
		(s16 a28 s11)
		(s17 a21 s18)
		(s18 a22 s11)
		(s18 a23 s4)
		(s19 a18 s12)
		(s19 a28 s11)
		(s20 a2 s21)
		(s21 a6 s0)
	}
);
// Testfile dumped by Ultimate at 2017/06/12 01:02:36
//
// RefinementSetting [mInterpolantAutomaton=ScroogeNondeterminism, mBouncerStem=false, mBouncerLoop=false, mScroogeNondeterminismStem=true, mScroogeNondeterminismLoop=false, mCannibalizeLoop=true]

FiniteAutomaton inclusionRHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 a28 a29 a30 a31 a32 a33 a34 a35 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 },
	initialStates = {s7 },
	finalStates = {s1 s6 s9 s11 s13 s15 s17 s18 },
	transitions = {
		(s0 a22 s0)
		(s0 a22 s9)
		(s0 a23 s0)
		(s0 a23 s9)
		(s0 a24 s0)
		(s0 a24 s9)
		(s0 a3 s0)
		(s0 a3 s9)
		(s0 a25 s0)
		(s0 a25 s9)
		(s0 a26 s0)
		(s0 a26 s9)
		(s0 a29 s0)
		(s0 a29 s9)
		(s0 a30 s0)
		(s0 a30 s9)
		(s0 a31 s0)
		(s0 a31 s15)
		(s0 a32 s0)
		(s0 a32 s9)
		(s0 a19 s0)
		(s0 a19 s1)
		(s0 a20 s0)
		(s0 a20 s9)
		(s0 a33 s0)
		(s0 a33 s9)
		(s0 a21 s0)
		(s0 a21 s9)
		(s0 a34 s0)
		(s0 a34 s9)
		(s0 a35 s0)
		(s0 a35 s9)
		(s1 a20 s3)
		(s2 a20 s2)
		(s2 a21 s18)
		(s3 a20 s3)
		(s3 a21 s19)
		(s4 a29 s4)
		(s4 a30 s4)
		(s4 a31 s10)
		(s4 a18 s4)
		(s4 a32 s4)
		(s4 a19 s2)
		(s4 a33 s4)
		(s4 a28 s4)
		(s4 a34 s12)
		(s5 a3 s5)
		(s5 a3 s9)
		(s5 a33 s5)
		(s5 a33 s9)
		(s5 a34 s5)
		(s5 a34 s9)
		(s5 a35 s5)
		(s5 a35 s9)
		(s6 a16 s4)
		(s6 a29 s4)
		(s6 a17 s4)
		(s6 a30 s4)
		(s6 a31 s10)
		(s6 a18 s4)
		(s6 a32 s4)
		(s6 a19 s2)
		(s6 a33 s4)
		(s6 a28 s4)
		(s6 a34 s12)
		(s7 a0 s7)
		(s7 a0 s13)
		(s7 a2 s7)
		(s7 a2 s13)
		(s7 a6 s14)
		(s7 a6 s13)
		(s8 a16 s6)
		(s8 a16 s8)
		(s8 a29 s6)
		(s8 a29 s8)
		(s8 a17 s6)
		(s8 a17 s8)
		(s8 a30 s6)
		(s8 a30 s8)
		(s8 a31 s8)
		(s8 a31 s11)
		(s8 a18 s6)
		(s8 a18 s8)
		(s8 a32 s6)
		(s8 a32 s8)
		(s8 a19 s0)
		(s8 a19 s17)
		(s8 a33 s6)
		(s8 a33 s8)
		(s8 a28 s6)
		(s8 a28 s8)
		(s8 a34 s5)
		(s8 a34 s9)
		(s9 a22 s12)
		(s9 a23 s12)
		(s9 a24 s12)
		(s9 a3 s12)
		(s9 a25 s12)
		(s9 a26 s12)
		(s9 a29 s12)
		(s9 a30 s12)
		(s9 a31 s16)
		(s9 a32 s12)
		(s9 a19 s3)
		(s9 a33 s12)
		(s9 a21 s12)
		(s9 a34 s12)
		(s9 a35 s12)
		(s10 a29 s10)
		(s10 a24 s10)
		(s10 a30 s10)
		(s10 a31 s10)
		(s10 a25 s10)
		(s10 a32 s10)
		(s10 a26 s10)
		(s10 a19 s17)
		(s10 a33 s10)
		(s10 a34 s15)
		(s11 a33 s10)
		(s12 a22 s12)
		(s12 a23 s12)
		(s12 a24 s12)
		(s12 a3 s12)
		(s12 a25 s12)
		(s12 a26 s12)
		(s12 a29 s12)
		(s12 a30 s12)
		(s12 a31 s16)
		(s12 a32 s12)
		(s12 a19 s3)
		(s12 a33 s12)
		(s12 a34 s12)
		(s12 a35 s12)
		(s13 a7 s20)
		(s13 a9 s20)
		(s14 a7 s14)
		(s14 a7 s13)
		(s14 a9 s14)
		(s14 a9 s13)
		(s14 a13 s6)
		(s14 a13 s8)
		(s15 a33 s16)
		(s15 a35 s16)
		(s16 a29 s16)
		(s16 a3 s16)
		(s16 a24 s16)
		(s16 a30 s16)
		(s16 a31 s16)
		(s16 a25 s16)
		(s16 a32 s16)
		(s16 a26 s16)
		(s16 a19 s3)
		(s16 a33 s16)
		(s16 a34 s16)
		(s16 a35 s16)
		(s17 a20 s21)
		(s18 a22 s10)
		(s18 a23 s10)
		(s19 a22 s16)
		(s19 a23 s16)
		(s20 a9 s20)
		(s21 a21 s22)
		(s22 a22 s10)
		(s22 a23 s10)
	}
);
