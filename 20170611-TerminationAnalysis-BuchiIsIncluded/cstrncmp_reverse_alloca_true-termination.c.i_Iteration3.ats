// Testfile dumped by Ultimate at 2017/06/11 23:19:40
//
// 

FiniteAutomaton inclusionLHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 a28 a29 a30 a31 a32 a33 a34 a35 a36 a37 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 },
	initialStates = {s9 },
	finalStates = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 },
	transitions = {
		(s0 a13 s3)
		(s1 a1 s17)
		(s2 a17 s13)
		(s3 a14 s5)
		(s4 a20 s6)
		(s5 a15 s2)
		(s6 a21 s7)
		(s7 a22 s8)
		(s8 a23 s15)
		(s9 a0 s1)
		(s10 a28 s11)
		(s11 a29 s12)
		(s12 a30 s16)
		(s13 a18 s14)
		(s14 a19 s4)
		(s15 a26 s10)
		(s16 a32 s13)
		(s17 a4 s18)
		(s17 a6 s18)
		(s18 a10 s19)
		(s18 a11 s19)
		(s19 a12 s0)
	}
);
// Testfile dumped by Ultimate at 2017/06/11 23:19:43
//
// RefinementSetting [mInterpolantAutomaton=ScroogeNondeterminism, mBouncerStem=false, mBouncerLoop=false, mScroogeNondeterminismStem=true, mScroogeNondeterminismLoop=false, mCannibalizeLoop=true]

FiniteAutomaton inclusionRHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 a28 a29 a30 a31 a32 a33 a34 a35 a36 a37 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 },
	initialStates = {s11 },
	finalStates = {s7 s8 s12 s13 s15 s19 s20 s22 },
	transitions = {
		(s0 a20 s0)
		(s0 a20 s19)
		(s0 a28 s0)
		(s0 a28 s19)
		(s0 a21 s0)
		(s0 a21 s15)
		(s0 a29 s0)
		(s0 a29 s15)
		(s0 a22 s0)
		(s0 a22 s20)
		(s0 a30 s0)
		(s0 a30 s19)
		(s0 a23 s0)
		(s0 a23 s19)
		(s0 a17 s0)
		(s0 a17 s19)
		(s0 a32 s0)
		(s0 a32 s19)
		(s0 a18 s0)
		(s0 a18 s19)
		(s0 a26 s0)
		(s0 a26 s19)
		(s0 a19 s0)
		(s0 a19 s19)
		(s1 a22 s7)
		(s2 a28 s2)
		(s2 a29 s2)
		(s2 a30 s2)
		(s2 a23 s2)
		(s2 a32 s22)
		(s2 a26 s2)
		(s3 a20 s3)
		(s3 a21 s21)
		(s3 a19 s3)
		(s4 a22 s12)
		(s5 a20 s5)
		(s5 a21 s4)
		(s5 a18 s5)
		(s5 a19 s5)
		(s6 a20 s6)
		(s6 a21 s1)
		(s6 a18 s6)
		(s6 a19 s6)
		(s7 a23 s10)
		(s8 a18 s21)
		(s9 a13 s13)
		(s9 a13 s9)
		(s9 a14 s13)
		(s9 a14 s9)
		(s9 a15 s0)
		(s9 a15 s19)
		(s10 a28 s10)
		(s10 a29 s10)
		(s10 a30 s10)
		(s10 a23 s10)
		(s10 a32 s8)
		(s10 a26 s10)
		(s11 a0 s13)
		(s11 a0 s11)
		(s11 a1 s13)
		(s11 a1 s11)
		(s11 a4 s13)
		(s11 a4 s11)
		(s11 a6 s13)
		(s11 a6 s11)
		(s11 a10 s13)
		(s11 a10 s11)
		(s11 a11 s13)
		(s11 a11 s11)
		(s11 a12 s13)
		(s11 a12 s9)
		(s12 a23 s2)
		(s13 a13 s14)
		(s13 a14 s14)
		(s13 a4 s14)
		(s13 a6 s14)
		(s13 a10 s14)
		(s13 a11 s14)
		(s14 a14 s14)
		(s14 a10 s14)
		(s14 a11 s14)
		(s15 a22 s2)
		(s15 a30 s17)
		(s16 a20 s16)
		(s16 a28 s16)
		(s16 a21 s17)
		(s16 a29 s17)
		(s16 a18 s16)
		(s16 a19 s16)
		(s17 a22 s2)
		(s17 a30 s17)
		(s17 a32 s6)
		(s18 a28 s18)
		(s18 a29 s2)
		(s18 a26 s18)
		(s19 a20 s16)
		(s19 a28 s16)
		(s19 a21 s17)
		(s19 a29 s17)
		(s19 a17 s16)
		(s19 a32 s5)
		(s19 a18 s16)
		(s19 a26 s16)
		(s19 a19 s16)
		(s20 a23 s18)
		(s21 a20 s21)
		(s21 a21 s21)
		(s21 a22 s10)
		(s21 a19 s21)
		(s22 a18 s3)
	}
);
