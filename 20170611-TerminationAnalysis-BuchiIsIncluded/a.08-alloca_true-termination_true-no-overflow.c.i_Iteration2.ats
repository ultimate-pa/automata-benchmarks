// Testfile dumped by Ultimate at 2017/06/12 01:27:19
//
// 

FiniteAutomaton inclusionLHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 },
	initialStates = {s12 },
	finalStates = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 },
	transitions = {
		(s0 a1 s1)
		(s1 a2 s8)
		(s2 a9 s3)
		(s3 a10 s17)
		(s4 a20 s15)
		(s5 a15 s7)
		(s6 a7 s9)
		(s7 a16 s11)
		(s8 a3 s10)
		(s9 a8 s2)
		(s10 a4 s15)
		(s11 a17 s13)
		(s12 a0 s0)
		(s13 a18 s14)
		(s14 a19 s4)
		(s15 a5 s16)
		(s16 a6 s6)
		(s17 a11 s18)
		(s18 a14 s5)
	}
);
// Testfile dumped by Ultimate at 2017/06/12 01:31:35
//
// RefinementSetting [mInterpolantAutomaton=ScroogeNondeterminism, mBouncerStem=false, mBouncerLoop=false, mScroogeNondeterminismStem=true, mScroogeNondeterminismLoop=false, mCannibalizeLoop=true]

FiniteAutomaton inclusionRHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 s27 s28 s29 s30 s31 s32 s33 s34 s35 s36 s37 s38 s39 s40 s41 s42 s43 s44 s45 s46 s47 s48 s49 s50 s51 s52 s53 s54 },
	initialStates = {s44 },
	finalStates = {s5 s14 s20 s27 s28 s32 s47 s54 },
	transitions = {
		(s0 a14 s46)
		(s1 a9 s10)
		(s2 a14 s17)
		(s3 a4 s11)
		(s4 a17 s4)
		(s4 a18 s13)
		(s5 a5 s7)
		(s6 a20 s6)
		(s6 a5 s6)
		(s6 a6 s33)
		(s7 a6 s18)
		(s8 a10 s24)
		(s9 a11 s52)
		(s10 a10 s26)
		(s11 a5 s11)
		(s11 a6 s19)
		(s12 a19 s41)
		(s13 a19 s6)
		(s14 a19 s41)
		(s15 a15 s16)
		(s16 a16 s47)
		(s17 a15 s31)
		(s18 a7 s23)
		(s19 a7 s25)
		(s20 a7 s35)
		(s21 a3 s21)
		(s21 a4 s11)
		(s22 a11 s51)
		(s23 a8 s38)
		(s24 a11 s0)
		(s25 a8 s39)
		(s26 a11 s2)
		(s27 a8 s29)
		(s28 a11 s52)
		(s29 a9 s29)
		(s29 a10 s22)
		(s30 a16 s45)
		(s31 a16 s4)
		(s32 a16 s45)
		(s33 a7 s43)
		(s34 a7 s35)
		(s35 a8 s42)
		(s36 a18 s12)
		(s37 a19 s41)
		(s38 a9 s8)
		(s39 a9 s10)
		(s40 a8 s53)
		(s41 a20 s41)
		(s41 a5 s41)
		(s41 a6 s48)
		(s42 a9 s8)
		(s43 a8 s1)
		(s44 a0 s47)
		(s44 a0 s44)
		(s44 a20 s47)
		(s44 a20 s44)
		(s44 a1 s47)
		(s44 a1 s44)
		(s44 a2 s47)
		(s44 a2 s44)
		(s44 a3 s47)
		(s44 a3 s44)
		(s44 a4 s5)
		(s44 a4 s44)
		(s44 a5 s47)
		(s44 a5 s44)
		(s44 a6 s20)
		(s44 a6 s44)
		(s44 a7 s27)
		(s44 a7 s44)
		(s44 a8 s47)
		(s44 a8 s44)
		(s44 a9 s47)
		(s44 a9 s44)
		(s44 a10 s28)
		(s44 a10 s44)
		(s44 a11 s47)
		(s44 a11 s44)
		(s44 a14 s47)
		(s44 a14 s44)
		(s44 a15 s32)
		(s44 a15 s44)
		(s44 a16 s47)
		(s44 a16 s44)
		(s44 a17 s47)
		(s44 a17 s44)
		(s44 a18 s14)
		(s44 a18 s44)
		(s44 a19 s47)
		(s44 a19 s44)
		(s45 a10 s9)
		(s45 a5 s45)
		(s45 a15 s30)
		(s45 a6 s34)
		(s45 a17 s45)
		(s45 a18 s37)
		(s46 a15 s49)
		(s47 a20 s45)
		(s47 a1 s50)
		(s47 a2 s21)
		(s47 a3 s3)
		(s47 a4 s11)
		(s47 a5 s45)
		(s47 a6 s34)
		(s47 a9 s45)
		(s47 a10 s9)
		(s47 a14 s45)
		(s47 a15 s30)
		(s47 a17 s45)
		(s47 a18 s37)
		(s48 a7 s40)
		(s49 a16 s54)
		(s50 a2 s21)
		(s51 a14 s15)
		(s52 a14 s15)
		(s53 a9 s8)
		(s54 a17 s36)
	}
);
