// Testfile dumped by Ultimate at 2017/06/12 01:38:02
//
// 

FiniteAutomaton inclusionLHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 a28 a29 a30 a31 a32 a33 a34 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 },
	initialStates = {s1 },
	finalStates = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 },
	transitions = {
		(s0 a23 s13)
		(s1 a0 s5)
		(s2 a32 s3)
		(s3 a33 s10)
		(s4 a30 s2)
		(s5 a2 s6)
		(s6 a4 s9)
		(s6 a7 s9)
		(s7 a18 s8)
		(s8 a19 s19)
		(s9 a8 s11)
		(s9 a9 s11)
		(s10 a14 s17)
		(s11 a10 s12)
		(s12 a11 s20)
		(s13 a24 s14)
		(s14 a25 s18)
		(s15 a21 s16)
		(s16 a22 s0)
		(s17 a15 s21)
		(s18 a27 s4)
		(s18 a28 s19)
		(s19 a20 s15)
		(s20 a12 s22)
		(s21 a17 s7)
		(s22 a13 s10)
	}
);
// Testfile dumped by Ultimate at 2017/06/12 01:38:03
//
// RefinementSetting [mInterpolantAutomaton=ScroogeNondeterminism, mBouncerStem=false, mBouncerLoop=false, mScroogeNondeterminismStem=true, mScroogeNondeterminismLoop=false, mCannibalizeLoop=true]

FiniteAutomaton inclusionRHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 a28 a29 a30 a31 a32 a33 a34 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 },
	initialStates = {s2 },
	finalStates = {s7 s8 s10 },
	transitions = {
		(s0 a15 s1)
		(s1 a20 s1)
		(s1 a21 s1)
		(s1 a22 s1)
		(s1 a23 s1)
		(s1 a24 s1)
		(s1 a25 s1)
		(s1 a27 s1)
		(s1 a28 s1)
		(s1 a30 s1)
		(s1 a32 s1)
		(s1 a17 s1)
		(s1 a18 s1)
		(s1 a33 s10)
		(s1 a19 s1)
		(s2 a0 s2)
		(s2 a0 s7)
		(s2 a2 s2)
		(s2 a2 s7)
		(s2 a4 s2)
		(s2 a4 s7)
		(s2 a7 s2)
		(s2 a7 s7)
		(s2 a8 s2)
		(s2 a8 s7)
		(s2 a9 s2)
		(s2 a9 s7)
		(s2 a10 s3)
		(s2 a10 s7)
		(s3 a20 s3)
		(s3 a20 s7)
		(s3 a21 s3)
		(s3 a21 s7)
		(s3 a22 s3)
		(s3 a22 s7)
		(s3 a23 s3)
		(s3 a23 s7)
		(s3 a24 s3)
		(s3 a24 s7)
		(s3 a25 s3)
		(s3 a25 s7)
		(s3 a11 s3)
		(s3 a11 s7)
		(s3 a27 s3)
		(s3 a27 s7)
		(s3 a12 s3)
		(s3 a12 s7)
		(s3 a13 s3)
		(s3 a13 s10)
		(s3 a28 s3)
		(s3 a28 s7)
		(s3 a14 s3)
		(s3 a14 s7)
		(s3 a30 s3)
		(s3 a30 s7)
		(s3 a15 s3)
		(s3 a15 s8)
		(s3 a32 s3)
		(s3 a32 s7)
		(s3 a17 s3)
		(s3 a17 s7)
		(s3 a18 s3)
		(s3 a18 s8)
		(s3 a33 s3)
		(s3 a33 s7)
		(s3 a19 s3)
		(s3 a19 s7)
		(s4 a14 s4)
		(s4 a15 s6)
		(s5 a20 s5)
		(s5 a21 s5)
		(s5 a22 s5)
		(s5 a23 s5)
		(s5 a24 s5)
		(s5 a25 s5)
		(s5 a8 s5)
		(s5 a9 s5)
		(s5 a27 s5)
		(s5 a12 s5)
		(s5 a28 s5)
		(s5 a30 s5)
		(s5 a15 s9)
		(s5 a32 s5)
		(s5 a33 s4)
		(s6 a20 s6)
		(s6 a21 s6)
		(s6 a22 s6)
		(s6 a23 s6)
		(s6 a24 s6)
		(s6 a25 s6)
		(s6 a27 s6)
		(s6 a28 s6)
		(s6 a30 s6)
		(s6 a32 s6)
		(s6 a17 s6)
		(s6 a18 s6)
		(s6 a33 s4)
		(s6 a19 s6)
		(s7 a20 s5)
		(s7 a21 s5)
		(s7 a4 s5)
		(s7 a22 s5)
		(s7 a7 s5)
		(s7 a23 s5)
		(s7 a24 s5)
		(s7 a25 s5)
		(s7 a8 s5)
		(s7 a9 s5)
		(s7 a11 s5)
		(s7 a27 s5)
		(s7 a12 s5)
		(s7 a28 s5)
		(s7 a30 s5)
		(s7 a14 s5)
		(s7 a15 s9)
		(s7 a32 s5)
		(s7 a18 s9)
		(s7 a33 s4)
		(s8 a17 s9)
		(s8 a19 s9)
		(s9 a20 s9)
		(s9 a21 s9)
		(s9 a22 s9)
		(s9 a23 s9)
		(s9 a24 s9)
		(s9 a25 s9)
		(s9 a27 s9)
		(s9 a28 s9)
		(s9 a30 s9)
		(s9 a32 s9)
		(s9 a17 s9)
		(s9 a18 s9)
		(s9 a33 s4)
		(s9 a19 s9)
		(s10 a14 s0)
	}
);
