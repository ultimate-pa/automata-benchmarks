// Testfile dumped by Ultimate at 2017/06/12 01:02:52
//
// 

FiniteAutomaton inclusionLHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 a28 a29 a30 a31 a32 a33 a34 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 },
	initialStates = {s0 },
	finalStates = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 },
	transitions = {
		(s0 a0 s9)
		(s1 a31 s2)
		(s2 a32 s8)
		(s3 a7 s4)
		(s4 a8 s5)
		(s5 a10 s6)
		(s6 a11 s7)
		(s7 a12 s8)
		(s8 a13 s11)
		(s9 a2 s10)
		(s10 a6 s3)
		(s11 a14 s16)
		(s12 a17 s13)
		(s13 a18 s17)
		(s14 a23 s15)
		(s15 a25 s21)
		(s15 a26 s22)
		(s16 a16 s12)
		(s17 a19 s18)
		(s18 a20 s19)
		(s19 a21 s20)
		(s20 a22 s14)
		(s21 a29 s1)
		(s22 a27 s12)
	}
);
// Testfile dumped by Ultimate at 2017/06/12 01:02:53
//
// RefinementSetting [mInterpolantAutomaton=ScroogeNondeterminism, mBouncerStem=false, mBouncerLoop=false, mScroogeNondeterminismStem=true, mScroogeNondeterminismLoop=false, mCannibalizeLoop=true]

FiniteAutomaton inclusionRHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 a28 a29 a30 a31 a32 a33 a34 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 },
	initialStates = {s3 },
	finalStates = {s5 s6 s7 },
	transitions = {
		(s0 a19 s0)
		(s0 a20 s0)
		(s0 a21 s0)
		(s0 a22 s0)
		(s0 a23 s0)
		(s0 a25 s0)
		(s0 a26 s0)
		(s0 a27 s0)
		(s0 a29 s0)
		(s0 a31 s0)
		(s0 a16 s0)
		(s0 a32 s6)
		(s0 a17 s0)
		(s0 a18 s0)
		(s1 a19 s1)
		(s1 a20 s1)
		(s1 a21 s1)
		(s1 a22 s1)
		(s1 a23 s1)
		(s1 a25 s1)
		(s1 a26 s1)
		(s1 a27 s1)
		(s1 a29 s1)
		(s1 a31 s1)
		(s1 a16 s1)
		(s1 a32 s9)
		(s1 a17 s1)
		(s1 a18 s1)
		(s2 a19 s2)
		(s2 a20 s2)
		(s2 a21 s2)
		(s2 a22 s2)
		(s2 a23 s2)
		(s2 a25 s2)
		(s2 a26 s2)
		(s2 a27 s2)
		(s2 a29 s2)
		(s2 a31 s2)
		(s2 a16 s2)
		(s2 a32 s9)
		(s2 a17 s2)
		(s2 a18 s2)
		(s3 a0 s3)
		(s3 a0 s7)
		(s3 a2 s3)
		(s3 a2 s7)
		(s3 a6 s7)
		(s3 a6 s8)
		(s4 a19 s4)
		(s4 a20 s4)
		(s4 a21 s1)
		(s4 a8 s4)
		(s4 a25 s4)
		(s4 a26 s4)
		(s4 a27 s4)
		(s4 a29 s4)
		(s4 a14 s1)
		(s4 a31 s4)
		(s4 a32 s9)
		(s4 a17 s4)
		(s4 a18 s4)
		(s5 a22 s1)
		(s5 a16 s1)
		(s6 a13 s10)
		(s7 a19 s4)
		(s7 a20 s4)
		(s7 a21 s1)
		(s7 a23 s4)
		(s7 a7 s4)
		(s7 a8 s4)
		(s7 a25 s4)
		(s7 a26 s4)
		(s7 a11 s4)
		(s7 a27 s4)
		(s7 a29 s4)
		(s7 a13 s4)
		(s7 a14 s1)
		(s7 a31 s4)
		(s7 a32 s9)
		(s7 a17 s4)
		(s7 a18 s4)
		(s8 a19 s7)
		(s8 a19 s8)
		(s8 a20 s7)
		(s8 a20 s8)
		(s8 a21 s5)
		(s8 a21 s8)
		(s8 a22 s7)
		(s8 a22 s8)
		(s8 a23 s7)
		(s8 a23 s8)
		(s8 a7 s7)
		(s8 a7 s8)
		(s8 a8 s7)
		(s8 a8 s8)
		(s8 a25 s7)
		(s8 a25 s8)
		(s8 a10 s7)
		(s8 a10 s8)
		(s8 a26 s7)
		(s8 a26 s8)
		(s8 a11 s7)
		(s8 a11 s8)
		(s8 a12 s6)
		(s8 a12 s8)
		(s8 a27 s7)
		(s8 a27 s8)
		(s8 a13 s7)
		(s8 a13 s8)
		(s8 a29 s7)
		(s8 a29 s8)
		(s8 a14 s5)
		(s8 a14 s8)
		(s8 a31 s7)
		(s8 a31 s8)
		(s8 a16 s7)
		(s8 a16 s8)
		(s8 a32 s7)
		(s8 a32 s8)
		(s8 a17 s7)
		(s8 a17 s8)
		(s8 a18 s7)
		(s8 a18 s8)
		(s9 a13 s9)
		(s9 a14 s2)
		(s10 a14 s0)
	}
);
