// Testfile dumped by Ultimate at 2017/06/12 01:58:42
//
// 

FiniteAutomaton inclusionLHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 a28 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 },
	initialStates = {s17 },
	finalStates = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 },
	transitions = {
		(s0 a10 s1)
		(s1 a11 s15)
		(s2 a13 s3)
		(s3 a15 s4)
		(s4 a16 s5)
		(s5 a17 s16)
		(s6 a4 s7)
		(s6 a5 s7)
		(s7 a6 s10)
		(s8 a19 s0)
		(s8 a20 s9)
		(s9 a22 s4)
		(s10 a7 s11)
		(s11 a8 s14)
		(s12 a1 s13)
		(s13 a2 s6)
		(s13 a3 s6)
		(s14 a9 s0)
		(s15 a12 s2)
		(s16 a18 s8)
		(s17 a0 s12)
	}
);
// Testfile dumped by Ultimate at 2017/06/12 01:58:43
//
// RefinementSetting [mInterpolantAutomaton=ScroogeNondeterminism, mBouncerStem=false, mBouncerLoop=false, mScroogeNondeterminismStem=true, mScroogeNondeterminismLoop=false, mCannibalizeLoop=true]

FiniteAutomaton inclusionRHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 a28 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 },
	initialStates = {s6 },
	finalStates = {s2 s4 s9 s10 },
	transitions = {
		(s0 a16 s0)
		(s0 a17 s0)
		(s0 a18 s0)
		(s0 a10 s0)
		(s0 a11 s1)
		(s0 a19 s0)
		(s0 a20 s0)
		(s0 a22 s0)
		(s1 a12 s2)
		(s2 a13 s3)
		(s3 a15 s0)
		(s4 a10 s0)
		(s5 a12 s5)
		(s5 a13 s5)
		(s5 a15 s11)
		(s6 a0 s6)
		(s6 a0 s9)
		(s6 a1 s6)
		(s6 a1 s9)
		(s6 a2 s6)
		(s6 a2 s9)
		(s6 a3 s6)
		(s6 a3 s9)
		(s6 a4 s6)
		(s6 a4 s9)
		(s6 a5 s6)
		(s6 a5 s9)
		(s6 a6 s7)
		(s6 a6 s9)
		(s7 a16 s7)
		(s7 a16 s9)
		(s7 a17 s7)
		(s7 a17 s9)
		(s7 a18 s7)
		(s7 a18 s9)
		(s7 a19 s7)
		(s7 a19 s9)
		(s7 a20 s7)
		(s7 a20 s9)
		(s7 a22 s7)
		(s7 a22 s9)
		(s7 a7 s7)
		(s7 a7 s9)
		(s7 a8 s7)
		(s7 a8 s9)
		(s7 a9 s7)
		(s7 a9 s4)
		(s7 a10 s7)
		(s7 a10 s9)
		(s7 a11 s7)
		(s7 a11 s10)
		(s7 a12 s7)
		(s7 a12 s9)
		(s7 a13 s7)
		(s7 a13 s9)
		(s7 a15 s7)
		(s7 a15 s9)
		(s8 a8 s8)
		(s8 a16 s8)
		(s8 a17 s8)
		(s8 a18 s8)
		(s8 a10 s8)
		(s8 a19 s8)
		(s8 a11 s13)
		(s8 a20 s8)
		(s8 a4 s8)
		(s8 a5 s8)
		(s8 a15 s8)
		(s8 a22 s8)
		(s9 a16 s8)
		(s9 a17 s8)
		(s9 a2 s8)
		(s9 a18 s8)
		(s9 a3 s8)
		(s9 a19 s8)
		(s9 a20 s8)
		(s9 a4 s8)
		(s9 a5 s8)
		(s9 a22 s8)
		(s9 a7 s8)
		(s9 a8 s8)
		(s9 a10 s8)
		(s9 a11 s13)
		(s9 a13 s8)
		(s9 a15 s8)
		(s10 a12 s12)
		(s11 a16 s11)
		(s11 a17 s11)
		(s11 a18 s11)
		(s11 a10 s11)
		(s11 a19 s11)
		(s11 a11 s5)
		(s11 a20 s11)
		(s11 a22 s11)
		(s12 a13 s12)
		(s12 a15 s8)
		(s13 a12 s5)
	}
);
