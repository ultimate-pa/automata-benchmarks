// Testfile dumped by Ultimate at 2017/06/12 01:58:49
//
// 

FiniteAutomaton inclusionLHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 a28 a29 a30 a31 a32 a33 a34 a35 a36 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 s23 s24 },
	initialStates = {s24 },
	finalStates = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 s23 s24 },
	transitions = {
		(s0 a16 s1)
		(s0 a17 s2)
		(s1 a7 s6)
		(s2 a19 s10)
		(s3 a6 s1)
		(s4 a23 s5)
		(s5 a24 s13)
		(s6 a8 s7)
		(s7 a9 s2)
		(s7 a10 s12)
		(s8 a27 s9)
		(s9 a28 s10)
		(s9 a29 s3)
		(s10 a20 s11)
		(s11 a22 s4)
		(s12 a11 s19)
		(s13 a25 s23)
		(s14 a13 s15)
		(s15 a14 s16)
		(s16 a15 s0)
		(s17 a3 s18)
		(s18 a4 s22)
		(s19 a12 s14)
		(s20 a1 s21)
		(s21 a2 s17)
		(s22 a5 s3)
		(s23 a26 s8)
		(s24 a0 s20)
	}
);
// Testfile dumped by Ultimate at 2017/06/12 01:58:51
//
// RefinementSetting [mInterpolantAutomaton=ScroogeNondeterminism, mBouncerStem=false, mBouncerLoop=false, mScroogeNondeterminismStem=true, mScroogeNondeterminismLoop=false, mCannibalizeLoop=true]

FiniteAutomaton inclusionRHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 a28 a29 a30 a31 a32 a33 a34 a35 a36 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 },
	initialStates = {s13 },
	finalStates = {s0 s2 s8 s11 },
	transitions = {
		(s0 a19 s15)
		(s0 a20 s12)
		(s0 a5 s10)
		(s0 a23 s4)
		(s0 a6 s15)
		(s0 a7 s15)
		(s0 a8 s15)
		(s0 a26 s15)
		(s0 a27 s15)
		(s0 a9 s15)
		(s0 a28 s15)
		(s0 a10 s15)
		(s0 a11 s15)
		(s0 a29 s15)
		(s0 a12 s15)
		(s0 a14 s15)
		(s0 a15 s15)
		(s0 a16 s15)
		(s0 a17 s15)
		(s1 a24 s5)
		(s2 a22 s14)
		(s3 a22 s14)
		(s4 a24 s7)
		(s5 a25 s0)
		(s6 a24 s9)
		(s7 a25 s15)
		(s8 a24 s7)
		(s10 a9 s10)
		(s10 a10 s10)
		(s10 a19 s10)
		(s10 a11 s10)
		(s10 a20 s16)
		(s10 a12 s10)
		(s10 a6 s10)
		(s10 a23 s6)
		(s10 a7 s10)
		(s10 a8 s10)
		(s11 a6 s14)
		(s12 a22 s14)
		(s13 a0 s0)
		(s13 a0 s13)
		(s13 a1 s0)
		(s13 a1 s13)
		(s13 a2 s0)
		(s13 a2 s13)
		(s13 a3 s0)
		(s13 a3 s13)
		(s13 a4 s0)
		(s13 a4 s13)
		(s13 a5 s11)
		(s13 a5 s13)
		(s13 a6 s0)
		(s13 a6 s13)
		(s13 a7 s0)
		(s13 a7 s13)
		(s13 a8 s0)
		(s13 a8 s13)
		(s13 a9 s0)
		(s13 a9 s13)
		(s13 a10 s0)
		(s13 a10 s13)
		(s13 a11 s0)
		(s13 a11 s13)
		(s13 a12 s0)
		(s13 a12 s13)
		(s13 a13 s0)
		(s13 a13 s13)
		(s13 a14 s0)
		(s13 a14 s13)
		(s13 a15 s0)
		(s13 a15 s13)
		(s13 a16 s0)
		(s13 a16 s13)
		(s13 a17 s0)
		(s13 a17 s13)
		(s13 a19 s0)
		(s13 a19 s13)
		(s13 a20 s2)
		(s13 a20 s13)
		(s13 a22 s0)
		(s13 a22 s13)
		(s13 a23 s13)
		(s13 a23 s8)
		(s13 a24 s0)
		(s13 a24 s13)
		(s13 a25 s0)
		(s13 a25 s13)
		(s13 a26 s0)
		(s13 a26 s13)
		(s13 a27 s0)
		(s13 a27 s13)
		(s13 a28 s0)
		(s13 a28 s13)
		(s13 a29 s0)
		(s13 a29 s13)
		(s14 a9 s14)
		(s14 a10 s14)
		(s14 a19 s14)
		(s14 a11 s14)
		(s14 a20 s3)
		(s14 a12 s14)
		(s14 a23 s1)
		(s14 a7 s14)
		(s14 a8 s14)
		(s15 a19 s15)
		(s15 a20 s12)
		(s15 a6 s15)
		(s15 a7 s15)
		(s15 a8 s15)
		(s15 a26 s15)
		(s15 a27 s15)
		(s15 a9 s15)
		(s15 a28 s15)
		(s15 a10 s15)
		(s15 a11 s15)
		(s15 a29 s15)
		(s15 a12 s15)
		(s15 a15 s15)
		(s15 a16 s15)
		(s15 a17 s15)
		(s16 a22 s10)
	}
);
