// Testfile dumped by Ultimate at 2017/06/11 22:57:45
//
// 

FiniteAutomaton inclusionLHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 },
	initialStates = {s8 },
	finalStates = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s14 s15 s18 s20 },
	transitions = {
		(s0 a2 s1)
		(s0 a3 s1)
		(s1 a4 s2)
		(s2 a6 s18)
		(s3 a21 s4)
		(s4 a15 s9)
		(s5 a18 s6)
		(s6 a19 s7)
		(s7 a20 s3)
		(s8 a0 s20)
		(s9 a17 s5)
		(s10 a8 s11)
		(s11 a14 s4)
		(s12 a9 s13)
		(s13 a10 s19)
		(s14 a12 s15)
		(s15 a7 s10)
		(s16 a12 s17)
		(s17 a7 s12)
		(s18 a7 s12)
		(s19 a11 s14)
		(s19 a11 s16)
		(s20 a1 s0)
	}
);
// Testfile dumped by Ultimate at 2017/06/11 22:57:55
//
// RefinementSetting [mInterpolantAutomaton=ScroogeNondeterminism, mBouncerStem=false, mBouncerLoop=false, mScroogeNondeterminismStem=true, mScroogeNondeterminismLoop=false, mCannibalizeLoop=true]

FiniteAutomaton inclusionRHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 s27 s28 s29 s30 s31 s32 s33 s34 s35 s36 s37 s38 s39 s40 s41 s42 s43 s44 s45 s46 s47 s48 s49 s50 s51 s52 },
	initialStates = {s34 },
	finalStates = {s0 s1 s3 s16 s22 s26 s36 s50 },
	transitions = {
		(s0 a18 s15)
		(s1 a7 s44)
		(s1 a15 s44)
		(s1 a8 s44)
		(s1 a9 s44)
		(s1 a10 s37)
		(s1 a11 s44)
		(s1 a17 s13)
		(s1 a12 s44)
		(s1 a20 s18)
		(s1 a14 s20)
		(s2 a18 s28)
		(s3 a18 s15)
		(s4 a18 s29)
		(s5 a18 s15)
		(s6 a18 s45)
		(s7 a15 s7)
		(s7 a17 s8)
		(s8 a18 s47)
		(s9 a15 s9)
		(s9 a17 s10)
		(s10 a18 s28)
		(s11 a15 s11)
		(s11 a17 s12)
		(s12 a18 s43)
		(s13 a18 s15)
		(s14 a15 s14)
		(s14 a17 s6)
		(s15 a19 s39)
		(s16 a15 s17)
		(s17 a17 s5)
		(s18 a21 s14)
		(s19 a21 s16)
		(s20 a15 s20)
		(s20 a17 s4)
		(s21 a15 s21)
		(s21 a17 s52)
		(s22 a21 s7)
		(s23 a2 s23)
		(s23 a3 s23)
		(s23 a4 s48)
		(s24 a21 s9)
		(s25 a21 s11)
		(s26 a19 s40)
		(s27 a21 s30)
		(s28 a19 s42)
		(s29 a19 s46)
		(s30 a15 s30)
		(s30 a17 s3)
		(s31 a20 s25)
		(s32 a20 s24)
		(s33 a20 s19)
		(s34 a0 s36)
		(s34 a0 s34)
		(s34 a1 s36)
		(s34 a1 s34)
		(s34 a2 s36)
		(s34 a2 s34)
		(s34 a3 s36)
		(s34 a3 s34)
		(s34 a4 s50)
		(s34 a4 s41)
		(s35 a4 s49)
		(s36 a1 s23)
		(s36 a2 s38)
		(s36 a3 s35)
		(s36 a4 s49)
		(s37 a7 s37)
		(s37 a8 s37)
		(s37 a9 s37)
		(s37 a10 s37)
		(s37 a11 s37)
		(s37 a12 s37)
		(s37 a14 s21)
		(s38 a4 s48)
		(s39 a20 s19)
		(s40 a20 s27)
		(s41 a15 s1)
		(s41 a15 s41)
		(s41 a17 s0)
		(s41 a17 s41)
		(s41 a18 s41)
		(s41 a18 s26)
		(s41 a19 s1)
		(s41 a19 s41)
		(s41 a20 s22)
		(s41 a20 s41)
		(s41 a21 s1)
		(s41 a21 s41)
		(s41 a6 s1)
		(s41 a6 s41)
		(s41 a7 s1)
		(s41 a7 s41)
		(s41 a8 s1)
		(s41 a8 s41)
		(s41 a9 s1)
		(s41 a9 s41)
		(s41 a10 s1)
		(s41 a10 s41)
		(s41 a11 s1)
		(s41 a11 s41)
		(s41 a12 s1)
		(s41 a12 s41)
		(s41 a14 s1)
		(s41 a14 s41)
		(s42 a20 s24)
		(s43 a19 s31)
		(s44 a7 s44)
		(s44 a8 s44)
		(s44 a9 s44)
		(s44 a10 s37)
		(s44 a17 s13)
		(s44 a12 s44)
		(s44 a14 s20)
		(s45 a19 s32)
		(s46 a20 s25)
		(s47 a19 s33)
		(s48 a7 s48)
		(s48 a15 s48)
		(s48 a8 s48)
		(s48 a9 s48)
		(s48 a10 s48)
		(s48 a11 s48)
		(s48 a17 s2)
		(s48 a12 s48)
		(s48 a6 s48)
		(s48 a14 s48)
		(s49 a7 s49)
		(s49 a8 s49)
		(s49 a9 s49)
		(s49 a10 s49)
		(s49 a11 s49)
		(s49 a12 s49)
		(s49 a6 s49)
		(s49 a14 s48)
		(s50 a6 s51)
		(s51 a7 s51)
		(s51 a9 s51)
		(s51 a10 s49)
		(s52 a18 s28)
	}
);
