// Testfile dumped by Ultimate at 2017/06/11 23:28:56
//
// 

FiniteAutomaton inclusionLHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 s23 s24 s25 },
	initialStates = {s6 },
	finalStates = {s4 s6 s8 s23 s24 s25 },
	transitions = {
		(s0 a5 s1)
		(s1 a10 s2)
		(s2 a0 s3)
		(s3 a5 s1)
		(s3 a5 s9)
		(s4 a3 s5)
		(s4 a3 s23)
		(s5 a5 s16)
		(s5 a5 s1)
		(s6 a1 s4)
		(s7 a5 s1)
		(s7 a5 s8)
		(s7 a5 s9)
		(s8 a10 s12)
		(s9 a10 s10)
		(s10 a0 s7)
		(s11 a0 s5)
		(s12 a2 s0)
		(s13 a10 s12)
		(s14 a5 s16)
		(s14 a5 s1)
		(s14 a5 s15)
		(s15 a10 s22)
		(s16 a10 s18)
		(s17 a5 s1)
		(s17 a5 s9)
		(s17 a5 s13)
		(s18 a0 s14)
		(s19 a0 s17)
		(s20 a10 s2)
		(s20 a10 s11)
		(s21 a5 s1)
		(s21 a5 s20)
		(s22 a2 s21)
		(s23 a5 s24)
		(s23 a5 s25)
		(s24 a10 s19)
		(s25 a10 s2)
	}
);
// Testfile dumped by Ultimate at 2017/06/11 23:28:58
//
// RefinementSetting [mInterpolantAutomaton=ScroogeNondeterminism, mBouncerStem=false, mBouncerLoop=false, mScroogeNondeterminismStem=true, mScroogeNondeterminismLoop=true, mCannibalizeLoop=true]

FiniteAutomaton inclusionRHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 },
	initialStates = {s17 },
	finalStates = {s1 s5 s10 s14 s18 s21 s25 },
	transitions = {
		(s0 a0 s5)
		(s0 a0 s6)
		(s0 a5 s0)
		(s0 a5 s21)
		(s0 a10 s0)
		(s0 a10 s21)
		(s1 a5 s2)
		(s2 a0 s11)
		(s2 a10 s2)
		(s3 a0 s4)
		(s3 a0 s25)
		(s3 a2 s10)
		(s3 a2 s15)
		(s3 a5 s3)
		(s3 a5 s18)
		(s3 a10 s3)
		(s3 a10 s18)
		(s4 a0 s4)
		(s4 a0 s25)
		(s4 a2 s10)
		(s4 a2 s23)
		(s4 a5 s4)
		(s4 a5 s25)
		(s4 a10 s4)
		(s4 a10 s25)
		(s5 a2 s14)
		(s5 a5 s7)
		(s5 a10 s7)
		(s6 a0 s16)
		(s6 a2 s14)
		(s6 a5 s5)
		(s6 a5 s6)
		(s6 a10 s5)
		(s6 a10 s6)
		(s7 a2 s14)
		(s7 a10 s7)
		(s8 a2 s9)
		(s8 a10 s8)
		(s9 a0 s11)
		(s9 a5 s9)
		(s9 a10 s9)
		(s10 a0 s11)
		(s10 a5 s12)
		(s10 a10 s12)
		(s11 a0 s13)
		(s11 a5 s11)
		(s11 a10 s11)
		(s12 a0 s11)
		(s12 a10 s12)
		(s13 a2 s9)
		(s13 a5 s13)
		(s13 a10 s13)
		(s14 a0 s14)
		(s14 a2 s14)
		(s14 a5 s14)
		(s14 a10 s14)
		(s15 a0 s15)
		(s15 a0 s18)
		(s15 a2 s1)
		(s15 a2 s17)
		(s15 a5 s15)
		(s15 a5 s18)
		(s15 a10 s15)
		(s15 a10 s18)
		(s16 a0 s16)
		(s16 a2 s10)
		(s16 a2 s24)
		(s16 a5 s16)
		(s16 a10 s16)
		(s17 a1 s17)
		(s17 a1 s18)
		(s17 a0 s15)
		(s17 a0 s18)
		(s17 a3 s25)
		(s17 a3 s26)
		(s17 a5 s17)
		(s17 a5 s18)
		(s17 a10 s17)
		(s17 a10 s18)
		(s18 a2 s9)
		(s18 a3 s19)
		(s18 a5 s8)
		(s18 a10 s8)
		(s19 a5 s19)
		(s19 a10 s19)
		(s20 a2 s10)
		(s20 a2 s24)
		(s20 a10 s20)
		(s21 a0 s13)
		(s21 a5 s22)
		(s21 a10 s22)
		(s22 a0 s13)
		(s22 a10 s22)
		(s23 a0 s25)
		(s23 a0 s23)
		(s23 a2 s10)
		(s23 a2 s23)
		(s23 a5 s25)
		(s23 a5 s23)
		(s23 a10 s25)
		(s23 a10 s23)
		(s24 a0 s0)
		(s24 a0 s21)
		(s24 a5 s10)
		(s24 a5 s24)
		(s24 a10 s10)
		(s24 a10 s24)
		(s25 a2 s10)
		(s25 a2 s24)
		(s25 a5 s20)
		(s25 a10 s20)
		(s26 a0 s3)
		(s26 a0 s18)
		(s26 a5 s26)
		(s26 a5 s18)
		(s26 a10 s26)
		(s26 a10 s18)
	}
);
