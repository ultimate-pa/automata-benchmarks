// Testfile dumped by Ultimate at 2017/06/12 01:38:07
//
// 

FiniteAutomaton inclusionLHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 s27 s28 },
	initialStates = {s24 },
	finalStates = {s0 s1 s4 s6 s7 s8 s9 s12 s13 s16 s20 s24 },
	transitions = {
		(s0 a12 s1)
		(s1 a13 s4)
		(s2 a12 s3)
		(s3 a13 s5)
		(s4 a14 s16)
		(s5 a14 s17)
		(s6 a4 s7)
		(s6 a5 s7)
		(s7 a6 s20)
		(s8 a1 s9)
		(s9 a2 s6)
		(s9 a3 s6)
		(s10 a19 s11)
		(s11 a20 s19)
		(s12 a9 s13)
		(s13 a10 s0)
		(s14 a9 s15)
		(s15 a10 s2)
		(s16 a15 s13)
		(s16 a16 s13)
		(s17 a15 s21)
		(s17 a16 s22)
		(s18 a18 s10)
		(s19 a21 s25)
		(s20 a7 s12)
		(s20 a7 s14)
		(s21 a10 s28)
		(s22 a10 s27)
		(s23 a7 s12)
		(s23 a7 s14)
		(s24 a0 s8)
		(s25 a23 s23)
		(s26 a18 s10)
		(s26 a22 s25)
		(s27 a11 s18)
		(s27 a12 s3)
		(s28 a11 s26)
		(s28 a12 s3)
	}
);
// Testfile dumped by Ultimate at 2017/06/12 01:38:10
//
// RefinementSetting [mInterpolantAutomaton=ScroogeNondeterminism, mBouncerStem=false, mBouncerLoop=false, mScroogeNondeterminismStem=true, mScroogeNondeterminismLoop=false, mCannibalizeLoop=true]

FiniteAutomaton inclusionRHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 },
	initialStates = {s7 },
	finalStates = {s1 s2 s6 },
	transitions = {
		(s0 a11 s0)
		(s0 a12 s3)
		(s0 a2 s0)
		(s0 a14 s0)
		(s0 a3 s0)
		(s0 a15 s4)
		(s0 a16 s0)
		(s0 a4 s0)
		(s0 a5 s0)
		(s0 a18 s3)
		(s0 a20 s0)
		(s0 a7 s0)
		(s0 a21 s0)
		(s0 a22 s0)
		(s0 a23 s0)
		(s0 a10 s0)
		(s1 a11 s0)
		(s1 a1 s0)
		(s1 a12 s3)
		(s1 a13 s0)
		(s1 a2 s0)
		(s1 a14 s0)
		(s1 a3 s0)
		(s1 a15 s4)
		(s1 a16 s0)
		(s1 a4 s0)
		(s1 a5 s0)
		(s1 a18 s3)
		(s1 a19 s0)
		(s1 a7 s0)
		(s1 a20 s0)
		(s1 a21 s0)
		(s1 a22 s0)
		(s1 a23 s0)
		(s1 a10 s0)
		(s2 a10 s5)
		(s3 a11 s3)
		(s3 a12 s3)
		(s3 a13 s3)
		(s3 a14 s3)
		(s3 a15 s2)
		(s3 a16 s3)
		(s3 a18 s3)
		(s3 a19 s3)
		(s3 a20 s3)
		(s3 a7 s3)
		(s3 a21 s3)
		(s3 a23 s3)
		(s3 a9 s3)
		(s3 a10 s3)
		(s4 a11 s4)
		(s4 a18 s6)
		(s4 a12 s6)
		(s4 a7 s4)
		(s4 a22 s4)
		(s4 a23 s4)
		(s4 a10 s4)
		(s5 a11 s5)
		(s5 a18 s6)
		(s5 a12 s6)
		(s5 a7 s5)
		(s5 a22 s5)
		(s5 a23 s5)
		(s6 a11 s6)
		(s6 a12 s6)
		(s6 a13 s6)
		(s6 a14 s6)
		(s6 a15 s6)
		(s6 a16 s6)
		(s6 a18 s6)
		(s6 a19 s6)
		(s6 a20 s6)
		(s6 a7 s6)
		(s6 a21 s6)
		(s6 a22 s6)
		(s6 a23 s6)
		(s6 a9 s6)
		(s6 a10 s6)
		(s7 a0 s1)
		(s7 a0 s7)
		(s7 a11 s1)
		(s7 a11 s7)
		(s7 a1 s1)
		(s7 a1 s7)
		(s7 a12 s1)
		(s7 a12 s7)
		(s7 a13 s1)
		(s7 a13 s7)
		(s7 a2 s1)
		(s7 a2 s7)
		(s7 a14 s1)
		(s7 a14 s7)
		(s7 a3 s1)
		(s7 a3 s7)
		(s7 a15 s2)
		(s7 a15 s7)
		(s7 a16 s1)
		(s7 a16 s7)
		(s7 a4 s1)
		(s7 a4 s7)
		(s7 a5 s1)
		(s7 a5 s7)
		(s7 a6 s1)
		(s7 a6 s7)
		(s7 a18 s1)
		(s7 a18 s7)
		(s7 a19 s1)
		(s7 a19 s7)
		(s7 a7 s1)
		(s7 a7 s7)
		(s7 a20 s1)
		(s7 a20 s7)
		(s7 a21 s1)
		(s7 a21 s7)
		(s7 a22 s1)
		(s7 a22 s7)
		(s7 a23 s1)
		(s7 a23 s7)
		(s7 a9 s1)
		(s7 a9 s7)
		(s7 a10 s1)
		(s7 a10 s7)
	}
);
