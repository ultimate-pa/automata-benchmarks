// Testfile dumped by Ultimate at 2017/06/12 01:31:43
//
// 

FiniteAutomaton inclusionLHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 a28 a29 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 },
	initialStates = {s10 },
	finalStates = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 },
	transitions = {
		(s0 a14 s15)
		(s1 a22 s4)
		(s2 a10 s3)
		(s3 a11 s9)
		(s4 a23 s5)
		(s5 a9 s2)
		(s6 a3 s7)
		(s7 a4 s8)
		(s8 a8 s5)
		(s9 a12 s18)
		(s10 a0 s16)
		(s11 a16 s12)
		(s12 a19 s13)
		(s13 a20 s14)
		(s14 a21 s1)
		(s15 a15 s11)
		(s16 a1 s17)
		(s17 a2 s6)
		(s18 a13 s0)
	}
);
// Testfile dumped by Ultimate at 2017/06/12 01:32:10
//
// RefinementSetting [mInterpolantAutomaton=ScroogeNondeterminism, mBouncerStem=false, mBouncerLoop=false, mScroogeNondeterminismStem=true, mScroogeNondeterminismLoop=false, mCannibalizeLoop=true]

FiniteAutomaton inclusionRHS = (
	alphabet = {a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 a28 a29 },
	states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 s27 s28 s29 s30 s31 s32 s33 s34 s35 s36 s37 s38 s39 s40 s41 s42 s43 s44 s45 s46 s47 s48 s49 s50 s51 s52 s53 s54 s55 s56 s57 s58 s59 s60 s61 s62 s63 s64 s65 s66 s67 s68 s69 s70 s71 s72 s73 s74 s75 s76 s77 s78 s79 s80 s81 s82 s83 s84 s85 s86 s87 s88 s89 s90 s91 },
	initialStates = {s81 },
	finalStates = {s3 s8 s18 s19 s27 s57 s63 s71 s78 s84 s88 },
	transitions = {
		(s0 a21 s55)
		(s1 a9 s1)
		(s1 a10 s73)
		(s1 a3 s1)
		(s1 a4 s1)
		(s1 a8 s1)
		(s2 a12 s13)
		(s3 a12 s5)
		(s4 a15 s66)
		(s5 a13 s5)
		(s5 a14 s7)
		(s6 a15 s67)
		(s7 a15 s68)
		(s8 a15 s67)
		(s9 a15 s74)
		(s10 a15 s65)
		(s11 a23 s38)
		(s12 a23 s41)
		(s13 a13 s51)
		(s14 a11 s69)
		(s15 a2 s1)
		(s16 a11 s70)
		(s17 a13 s51)
		(s18 a23 s59)
		(s19 a2 s30)
		(s20 a13 s52)
		(s21 a13 s54)
		(s22 a13 s24)
		(s23 a13 s26)
		(s24 a14 s29)
		(s25 a19 s40)
		(s26 a14 s31)
		(s27 a9 s30)
		(s27 a10 s75)
		(s27 a19 s30)
		(s27 a20 s86)
		(s27 a3 s1)
		(s27 a4 s30)
		(s27 a23 s30)
		(s27 a13 s30)
		(s27 a14 s6)
		(s27 a8 s30)
		(s28 a19 s43)
		(s29 a15 s35)
		(s30 a9 s30)
		(s30 a10 s75)
		(s30 a20 s86)
		(s30 a3 s1)
		(s30 a14 s6)
		(s30 a8 s30)
		(s31 a15 s37)
		(s32 a19 s76)
		(s33 a19 s27)
		(s33 a19 s33)
		(s33 a20 s33)
		(s33 a20 s88)
		(s33 a3 s27)
		(s33 a3 s33)
		(s33 a21 s33)
		(s33 a21 s63)
		(s33 a4 s27)
		(s33 a4 s48)
		(s33 a22 s27)
		(s33 a22 s33)
		(s33 a23 s27)
		(s33 a23 s33)
		(s33 a9 s27)
		(s33 a9 s33)
		(s33 a10 s78)
		(s33 a10 s33)
		(s33 a11 s3)
		(s33 a11 s33)
		(s33 a12 s27)
		(s33 a12 s33)
		(s33 a13 s27)
		(s33 a13 s33)
		(s33 a14 s33)
		(s33 a14 s8)
		(s33 a15 s33)
		(s33 a15 s71)
		(s33 a16 s27)
		(s33 a16 s33)
		(s34 a19 s45)
		(s35 a16 s39)
		(s36 a19 s45)
		(s37 a16 s42)
		(s38 a9 s38)
		(s38 a10 s14)
		(s39 a19 s44)
		(s40 a20 s91)
		(s41 a9 s41)
		(s41 a10 s16)
		(s42 a19 s46)
		(s43 a20 s0)
		(s44 a20 s49)
		(s45 a20 s85)
		(s46 a20 s50)
		(s47 a2 s27)
		(s47 a2 s33)
		(s48 a8 s57)
		(s48 a8 s33)
		(s49 a21 s53)
		(s50 a21 s56)
		(s51 a14 s9)
		(s52 a14 s10)
		(s53 a22 s60)
		(s54 a14 s4)
		(s55 a22 s11)
		(s56 a22 s60)
		(s57 a9 s59)
		(s58 a22 s12)
		(s59 a9 s59)
		(s59 a10 s77)
		(s60 a23 s83)
		(s61 a22 s12)
		(s62 a23 s1)
		(s63 a22 s62)
		(s64 a22 s62)
		(s65 a16 s28)
		(s66 a16 s32)
		(s67 a16 s34)
		(s68 a16 s36)
		(s69 a12 s22)
		(s70 a12 s23)
		(s71 a16 s72)
		(s72 a19 s30)
		(s73 a11 s87)
		(s74 a16 s25)
		(s75 a11 s89)
		(s76 a20 s79)
		(s77 a11 s90)
		(s78 a11 s89)
		(s79 a21 s80)
		(s80 a22 s18)
		(s81 a0 s84)
		(s81 a0 s81)
		(s81 a1 s47)
		(s81 a1 s19)
		(s82 a11 s2)
		(s83 a9 s83)
		(s83 a10 s82)
		(s84 a1 s15)
		(s85 a21 s58)
		(s86 a21 s61)
		(s87 a12 s17)
		(s88 a21 s61)
		(s89 a12 s20)
		(s90 a12 s21)
		(s91 a21 s64)
	}
);
