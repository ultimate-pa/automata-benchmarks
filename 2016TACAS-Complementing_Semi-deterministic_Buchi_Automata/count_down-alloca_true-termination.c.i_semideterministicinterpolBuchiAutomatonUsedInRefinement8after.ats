// Testfile dumped by Ultimate at 2015/10/05 09:41:30
//
// RefinementSetting [m_InterpolantAutomaton=ScroogeNondeterminism, m_BouncerStem=true, m_BouncerLoop=false, m_ScroogeNondeterminismStem=true, m_ScroogeNondeterminismLoop=false, m_CannibalizeLoop=false, m_UsedDefinedMaxRank=-3]

NestedWordAutomaton nwa = (
	callAlphabet = {},
	internalAlphabet = {"assume !(main_~val~2 < 0);" "write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := main_~val~2, main_~arr~2.base, main_~arr~2.offset + main_~i~2 * 4, 4;" "assume true;" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := main_~arr~2.base, main_~arr~2.offset + main_~j~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];main_#t~mem6 := read~int_#value;assume !!(main_#t~mem6 > 0);havoc main_#t~mem6;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := main_~arr~2.base, main_~arr~2.offset + main_~j~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];main_#t~mem7 := read~int_#value;main_#t~post8 := main_#t~mem7;write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := main_#t~post8 - 1, main_~arr~2.base, main_~arr~2.offset + main_~j~2 * 4, 4;assume true;assume !(write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base]);" "assume !!(main_~i~2 < main_~length~2);main_~val~2 := main_#t~nondet3;havoc main_#t~nondet3;" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := main_~arr~2.base, main_~arr~2.offset + main_~j~2 * 4, 4;assume !#valid[read~int_#ptr.base];" "assume !true;" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := main_~arr~2.base, main_~arr~2.offset + main_~j~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];main_#t~mem6 := read~int_#value;assume !!(main_#t~mem6 > 0);havoc main_#t~mem6;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := main_~arr~2.base, main_~arr~2.offset + main_~j~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];main_#t~mem7 := read~int_#value;main_#t~post8 := main_#t~mem7;write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := main_#t~post8 - 1, main_~arr~2.base, main_~arr~2.offset + main_~j~2 * 4, 4;assume true;assume true;assume #valid[write~int_#ptr.base];assume write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base];havoc #memory_int;assume #memory_int == write~int_old_#memory_int[write~int_#ptr.base,write~int_#ptr.offset := write~int_#value];havoc main_#t~mem7;havoc main_#t~post8;" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := main_~arr~2.base, main_~arr~2.offset + main_~j~2 * 4, 4;assume true;assume !(read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base]);" "assume main_~length~2 < 1;main_~length~2 := 1;" "assume main_~val~2 < 0;main_~val~2 := 0;" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := main_~arr~2.base, main_~arr~2.offset + main_~j~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];main_#t~mem6 := read~int_#value;assume !!(main_#t~mem6 > 0);havoc main_#t~mem6;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := main_~arr~2.base, main_~arr~2.offset + main_~j~2 * 4, 4;assume true;assume !(read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base]);" "assume !(main_~i~2 < main_~length~2);" "assume true;assume !(write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base]);" "assume !#valid[write~int_#ptr.base];" "#NULL.base, #NULL.offset := 0, 0;#valid := #valid[0 := false];havoc main_#res;havoc main_#t~nondet0, main_#t~malloc1.base, main_#t~malloc1.offset, main_#t~nondet3, main_#t~post2, main_#t~mem7, main_#t~post8, main_#t~mem6, main_#t~post5, main_~i~2, main_~j~2, main_~val~2, main_~length~2, main_~arr~2.base, main_~arr~2.offset;havoc main_~i~2;havoc main_~j~2;havoc main_~val~2;main_~length~2 := main_#t~nondet0;havoc main_#t~nondet0;" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := main_~arr~2.base, main_~arr~2.offset + main_~j~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];main_#t~mem6 := read~int_#value;assume !!(main_#t~mem6 > 0);havoc main_#t~mem6;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := main_~arr~2.base, main_~arr~2.offset + main_~j~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];main_#t~mem7 := read~int_#value;main_#t~post8 := main_#t~mem7;write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := main_#t~post8 - 1, main_~arr~2.base, main_~arr~2.offset + main_~j~2 * 4, 4;assume !#valid[write~int_#ptr.base];" "assume true;assume true;assume #valid[write~int_#ptr.base];assume write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base];havoc #memory_int;assume #memory_int == write~int_old_#memory_int[write~int_#ptr.base,write~int_#ptr.offset := write~int_#value];main_#t~post2 := main_~i~2;main_~i~2 := main_#t~post2 + 1;havoc main_#t~post2;" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := main_~arr~2.base, main_~arr~2.offset + main_~j~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];main_#t~mem6 := read~int_#value;assume !(main_#t~mem6 > 0);havoc main_#t~mem6;" "assume main_~arr~2.base == #NULL.base && main_~arr~2.offset == #NULL.offset;main_#res := 0;~free_old_#valid := #valid;~free_~addr.base, ~free_~addr.offset := main_#t~malloc1.base, main_#t~malloc1.offset;assume true;assume true;assume ~free_~addr.offset == 0;assume #valid[~free_~addr.base];havoc #valid;assume #valid == ~free_old_#valid[~free_~addr.base := false];havoc main_#t~malloc1.base, main_#t~malloc1.offset;" "assume true;assume !(main_~j~2 < main_~length~2);" "assume !(main_~length~2 < 1);" "~malloc_old_#valid, ~malloc_old_#length := #valid, #length;~malloc_~size := main_~length~2 * 4;havoc ~malloc_#res.base, ~malloc_#res.offset;havoc #valid, #length;assume ~malloc_old_#valid[~malloc_#res.base] == false;assume #valid == ~malloc_old_#valid[~malloc_#res.base := true];assume ~malloc_#res.offset == 0;assume ~malloc_#res.base != 0;assume #length == ~malloc_old_#length[~malloc_#res.base := ~malloc_~size];main_#t~malloc1.base, main_#t~malloc1.offset := ~malloc_#res.base, ~malloc_#res.offset;main_~arr~2.base, main_~arr~2.offset := main_#t~malloc1.base, main_#t~malloc1.offset;" "main_#t~post5 := main_~j~2;main_~j~2 := main_#t~post5 + 1;havoc main_#t~post5;" "assume main_~arr~2.base == #NULL.base && main_~arr~2.offset == #NULL.offset;main_#res := 0;~free_old_#valid := #valid;~free_~addr.base, ~free_~addr.offset := main_#t~malloc1.base, main_#t~malloc1.offset;assume !(~free_~addr.offset == 0);" "assume main_~arr~2.base == #NULL.base && main_~arr~2.offset == #NULL.offset;main_#res := 0;~free_old_#valid := #valid;~free_~addr.base, ~free_~addr.offset := main_#t~malloc1.base, main_#t~malloc1.offset;assume true;assume !#valid[~free_~addr.base];" "#t~ret9 := main_#res;assume true;" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := main_~arr~2.base, main_~arr~2.offset + main_~j~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];main_#t~mem6 := read~int_#value;assume !!(main_#t~mem6 > 0);havoc main_#t~mem6;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := main_~arr~2.base, main_~arr~2.offset + main_~j~2 * 4, 4;assume !#valid[read~int_#ptr.base];" "main_#res := 0;~free_old_#valid := #valid;~free_~addr.base, ~free_~addr.offset := main_#t~malloc1.base, main_#t~malloc1.offset;assume !(~free_~addr.offset == 0);" "main_~j~2 := 0;" "assume !true;" "assume !true;" "assume !(main_~arr~2.base == #NULL.base && main_~arr~2.offset == #NULL.offset);main_~i~2 := 0;" "main_#res := 0;~free_old_#valid := #valid;~free_~addr.base, ~free_~addr.offset := main_#t~malloc1.base, main_#t~malloc1.offset;assume true;assume true;assume ~free_~addr.offset == 0;assume #valid[~free_~addr.base];havoc #valid;assume #valid == ~free_old_#valid[~free_~addr.base := false];havoc main_#t~malloc1.base, main_#t~malloc1.offset;" "main_#res := 0;~free_old_#valid := #valid;~free_~addr.base, ~free_~addr.offset := main_#t~malloc1.base, main_#t~malloc1.offset;assume true;assume !#valid[~free_~addr.base];" "assume true;assume !!(main_~j~2 < main_~length~2);" },
	returnAlphabet = {},
	states = {"1703#(<= (select (select |#memory_int| ULTIMATE.start_main_~arr~2.base) (+ ULTIMATE.start_main_~arr~2.offset (* ULTIMATE.start_main_~j~2 4))) oldRank0)" "1702#(and (<= (+ (select (select |#memory_int| ULTIMATE.start_main_~arr~2.base) (+ ULTIMATE.start_main_~arr~2.offset (* ULTIMATE.start_main_~j~2 4))) 1) oldRank0) (<= 0 oldRank0))" "1674#unseeded" },
	initialStates = {"1674#unseeded" },
	finalStates = {"1702#(and (<= (+ (select (select |#memory_int| ULTIMATE.start_main_~arr~2.base) (+ ULTIMATE.start_main_~arr~2.offset (* ULTIMATE.start_main_~j~2 4))) 1) oldRank0) (<= 0 oldRank0))" },
	callTransitions = {
	},
	internalTransitions = {
		 ("1702#(and (<= (+ (select (select |#memory_int| ULTIMATE.start_main_~arr~2.base) (+ ULTIMATE.start_main_~arr~2.offset (* ULTIMATE.start_main_~j~2 4))) 1) oldRank0) (<= 0 oldRank0))" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := main_~arr~2.base, main_~arr~2.offset + main_~j~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];main_#t~mem6 := read~int_#value;assume !(main_#t~mem6 > 0);havoc main_#t~mem6;" "1703#(<= (select (select |#memory_int| ULTIMATE.start_main_~arr~2.base) (+ ULTIMATE.start_main_~arr~2.offset (* ULTIMATE.start_main_~j~2 4))) oldRank0)")
		 ("1702#(and (<= (+ (select (select |#memory_int| ULTIMATE.start_main_~arr~2.base) (+ ULTIMATE.start_main_~arr~2.offset (* ULTIMATE.start_main_~j~2 4))) 1) oldRank0) (<= 0 oldRank0))" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := main_~arr~2.base, main_~arr~2.offset + main_~j~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];main_#t~mem6 := read~int_#value;assume !!(main_#t~mem6 > 0);havoc main_#t~mem6;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := main_~arr~2.base, main_~arr~2.offset + main_~j~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];main_#t~mem7 := read~int_#value;main_#t~post8 := main_#t~mem7;write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := main_#t~post8 - 1, main_~arr~2.base, main_~arr~2.offset + main_~j~2 * 4, 4;assume true;assume true;assume #valid[write~int_#ptr.base];assume write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base];havoc #memory_int;assume #memory_int == write~int_old_#memory_int[write~int_#ptr.base,write~int_#ptr.offset := write~int_#value];havoc main_#t~mem7;havoc main_#t~post8;" "1702#(and (<= (+ (select (select |#memory_int| ULTIMATE.start_main_~arr~2.base) (+ ULTIMATE.start_main_~arr~2.offset (* ULTIMATE.start_main_~j~2 4))) 1) oldRank0) (<= 0 oldRank0))")
		 ("1674#unseeded" "assume !(main_~val~2 < 0);" "1674#unseeded")
		 ("1674#unseeded" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := main_~arr~2.base, main_~arr~2.offset + main_~j~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];main_#t~mem6 := read~int_#value;assume !(main_#t~mem6 > 0);havoc main_#t~mem6;" "1674#unseeded")
		 ("1674#unseeded" "write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := main_~val~2, main_~arr~2.base, main_~arr~2.offset + main_~i~2 * 4, 4;" "1674#unseeded")
		 ("1674#unseeded" "assume true;" "1674#unseeded")
		 ("1674#unseeded" "assume !(main_~length~2 < 1);" "1674#unseeded")
		 ("1674#unseeded" "assume !!(main_~i~2 < main_~length~2);main_~val~2 := main_#t~nondet3;havoc main_#t~nondet3;" "1674#unseeded")
		 ("1674#unseeded" "main_#t~post5 := main_~j~2;main_~j~2 := main_#t~post5 + 1;havoc main_#t~post5;" "1674#unseeded")
		 ("1674#unseeded" "~malloc_old_#valid, ~malloc_old_#length := #valid, #length;~malloc_~size := main_~length~2 * 4;havoc ~malloc_#res.base, ~malloc_#res.offset;havoc #valid, #length;assume ~malloc_old_#valid[~malloc_#res.base] == false;assume #valid == ~malloc_old_#valid[~malloc_#res.base := true];assume ~malloc_#res.offset == 0;assume ~malloc_#res.base != 0;assume #length == ~malloc_old_#length[~malloc_#res.base := ~malloc_~size];main_#t~malloc1.base, main_#t~malloc1.offset := ~malloc_#res.base, ~malloc_#res.offset;main_~arr~2.base, main_~arr~2.offset := main_#t~malloc1.base, main_#t~malloc1.offset;" "1674#unseeded")
		 ("1674#unseeded" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := main_~arr~2.base, main_~arr~2.offset + main_~j~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];main_#t~mem6 := read~int_#value;assume !!(main_#t~mem6 > 0);havoc main_#t~mem6;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := main_~arr~2.base, main_~arr~2.offset + main_~j~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];main_#t~mem7 := read~int_#value;main_#t~post8 := main_#t~mem7;write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := main_#t~post8 - 1, main_~arr~2.base, main_~arr~2.offset + main_~j~2 * 4, 4;assume true;assume true;assume #valid[write~int_#ptr.base];assume write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base];havoc #memory_int;assume #memory_int == write~int_old_#memory_int[write~int_#ptr.base,write~int_#ptr.offset := write~int_#value];havoc main_#t~mem7;havoc main_#t~post8;" "1674#unseeded")
		 ("1674#unseeded" "main_~j~2 := 0;" "1674#unseeded")
		 ("1674#unseeded" "assume main_~val~2 < 0;main_~val~2 := 0;" "1674#unseeded")
		 ("1674#unseeded" "assume !(main_~i~2 < main_~length~2);" "1674#unseeded")
		 ("1674#unseeded" "assume !(main_~arr~2.base == #NULL.base && main_~arr~2.offset == #NULL.offset);main_~i~2 := 0;" "1674#unseeded")
		 ("1674#unseeded" "#NULL.base, #NULL.offset := 0, 0;#valid := #valid[0 := false];havoc main_#res;havoc main_#t~nondet0, main_#t~malloc1.base, main_#t~malloc1.offset, main_#t~nondet3, main_#t~post2, main_#t~mem7, main_#t~post8, main_#t~mem6, main_#t~post5, main_~i~2, main_~j~2, main_~val~2, main_~length~2, main_~arr~2.base, main_~arr~2.offset;havoc main_~i~2;havoc main_~j~2;havoc main_~val~2;main_~length~2 := main_#t~nondet0;havoc main_#t~nondet0;" "1674#unseeded")
		 ("1674#unseeded" "assume true;assume true;assume #valid[write~int_#ptr.base];assume write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base];havoc #memory_int;assume #memory_int == write~int_old_#memory_int[write~int_#ptr.base,write~int_#ptr.offset := write~int_#value];main_#t~post2 := main_~i~2;main_~i~2 := main_#t~post2 + 1;havoc main_#t~post2;" "1674#unseeded")
		 ("1674#unseeded" "assume true;assume !!(main_~j~2 < main_~length~2);" "1702#(and (<= (+ (select (select |#memory_int| ULTIMATE.start_main_~arr~2.base) (+ ULTIMATE.start_main_~arr~2.offset (* ULTIMATE.start_main_~j~2 4))) 1) oldRank0) (<= 0 oldRank0))")
		 ("1674#unseeded" "assume true;assume !!(main_~j~2 < main_~length~2);" "1674#unseeded")
	},
	returnTransitions = {
	}
);
