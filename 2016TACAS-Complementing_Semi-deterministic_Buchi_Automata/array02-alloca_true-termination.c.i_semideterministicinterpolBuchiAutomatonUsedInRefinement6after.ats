// Testfile dumped by Ultimate at 2015/10/05 07:24:03
//
// RefinementSetting [m_InterpolantAutomaton=ScroogeNondeterminism, m_BouncerStem=true, m_BouncerLoop=false, m_ScroogeNondeterminismStem=true, m_ScroogeNondeterminismLoop=false, m_CannibalizeLoop=false, m_UsedDefinedMaxRank=-3]

NestedWordAutomaton nwa = (
	callAlphabet = {},
	internalAlphabet = {"~free_old_#valid := #valid;~free_~addr.base, ~free_~addr.offset := main_#t~malloc10.base, main_#t~malloc10.offset;assume true;assume !#valid[~free_~addr.base];" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem1 := read~int_#value;assume !(test_fun_#t~mem1 < 0);havoc test_fun_#t~mem1;" "~free_old_#valid := #valid;~free_~addr.base, ~free_~addr.offset := main_#t~malloc10.base, main_#t~malloc10.offset;assume true;assume true;assume ~free_~addr.offset == 0;assume #valid[~free_~addr.base];havoc #valid;assume #valid == ~free_old_#valid[~free_~addr.base := false];havoc main_#t~malloc10.base, main_#t~malloc10.offset;#t~ret11 := main_#res;assume true;" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem1 := read~int_#value;assume !!(test_fun_#t~mem1 < 0);havoc test_fun_#t~mem1;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume !(read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base]);" "assume true;assume !(test_fun_~i~2 < test_fun_~N);" "test_fun_#t~post0 := test_fun_~i~2;test_fun_~i~2 := test_fun_#t~post0 + 1;havoc test_fun_#t~post0;" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem1 := read~int_#value;assume !!(test_fun_#t~mem1 < 0);havoc test_fun_#t~mem1;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume !#valid[read~int_#ptr.base];" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume !#valid[read~int_#ptr.base];" "#NULL.base, #NULL.offset := 0, 0;#valid := #valid[0 := false];havoc main_#res;havoc main_#t~nondet9, main_#t~malloc10.base, main_#t~malloc10.offset, main_~array_size~6, main_~numbers~6.base, main_~numbers~6.offset;main_~array_size~6 := main_#t~nondet9;havoc main_#t~nondet9;" "assume !true;" "assume !(main_~array_size~6 < 1);" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume !(read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base]);" "~free_old_#valid := #valid;~free_~addr.base, ~free_~addr.offset := main_#t~malloc10.base, main_#t~malloc10.offset;assume !(~free_~addr.offset == 0);" "~malloc_old_#valid, ~malloc_old_#length := #valid, #length;~malloc_~size := main_~array_size~6 * 4;havoc ~malloc_#res.base, ~malloc_#res.offset;havoc #valid, #length;assume ~malloc_old_#valid[~malloc_#res.base] == false;assume #valid == ~malloc_old_#valid[~malloc_#res.base := true];assume ~malloc_#res.offset == 0;assume ~malloc_#res.base != 0;assume #length == ~malloc_old_#length[~malloc_#res.base := ~malloc_~size];main_#t~malloc10.base, main_#t~malloc10.offset := ~malloc_#res.base, ~malloc_#res.offset;main_~numbers~6.base, main_~numbers~6.offset := main_#t~malloc10.base, main_#t~malloc10.offset;test_fun_#in~a.base, test_fun_#in~a.offset, test_fun_#in~N := main_~numbers~6.base, main_~numbers~6.offset, main_~array_size~6;havoc test_fun_#t~mem2, test_fun_#t~post3, test_fun_#t~post4, test_fun_#t~mem1, test_fun_#t~mem6, test_fun_#t~post7, test_fun_#t~post8, test_fun_#t~mem5, test_fun_#t~post0, test_fun_~a.base, test_fun_~a.offset, test_fun_~N, test_fun_~i~2, test_fun_~pos~2, test_fun_~neg~2;test_fun_~a.base, test_fun_~a.offset := test_fun_#in~a.base, test_fun_#in~a.offset;test_fun_~N := test_fun_#in~N;havoc test_fun_~i~2;test_fun_~pos~2 := 0;test_fun_~neg~2 := 0;test_fun_~i~2 := 0;" "assume true;assume !!(test_fun_~i~2 < test_fun_~N);" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem5 := read~int_#value;assume !!(test_fun_#t~mem5 > 0);havoc test_fun_#t~mem5;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem6 := read~int_#value;test_fun_#t~post7 := test_fun_#t~mem6;write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := test_fun_#t~post7 - 1, test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[write~int_#ptr.base];assume write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base];havoc #memory_int;assume #memory_int == write~int_old_#memory_int[write~int_#ptr.base,write~int_#ptr.offset := write~int_#value];havoc test_fun_#t~mem6;havoc test_fun_#t~post7;test_fun_#t~post8 := test_fun_~pos~2;test_fun_~pos~2 := test_fun_#t~post8 + 1;havoc test_fun_#t~post8;" "assume !true;" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem5 := read~int_#value;assume !!(test_fun_#t~mem5 > 0);havoc test_fun_#t~mem5;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem6 := read~int_#value;test_fun_#t~post7 := test_fun_#t~mem6;write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := test_fun_#t~post7 - 1, test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume !#valid[write~int_#ptr.base];" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem1 := read~int_#value;assume !!(test_fun_#t~mem1 < 0);havoc test_fun_#t~mem1;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem2 := read~int_#value;test_fun_#t~post3 := test_fun_#t~mem2;write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := test_fun_#t~post3 + 1, test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[write~int_#ptr.base];assume write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base];havoc #memory_int;assume #memory_int == write~int_old_#memory_int[write~int_#ptr.base,write~int_#ptr.offset := write~int_#value];havoc test_fun_#t~mem2;havoc test_fun_#t~post3;test_fun_#t~post4 := test_fun_~neg~2;test_fun_~neg~2 := test_fun_#t~post4 + 1;havoc test_fun_#t~post4;" "assume main_~array_size~6 < 1;main_~array_size~6 := 1;" "assume !true;" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume !#valid[read~int_#ptr.base];" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem1 := read~int_#value;assume !!(test_fun_#t~mem1 < 0);havoc test_fun_#t~mem1;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem2 := read~int_#value;test_fun_#t~post3 := test_fun_#t~mem2;write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := test_fun_#t~post3 + 1, test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume !(write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base]);" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem5 := read~int_#value;assume !!(test_fun_#t~mem5 > 0);havoc test_fun_#t~mem5;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem6 := read~int_#value;test_fun_#t~post7 := test_fun_#t~mem6;write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := test_fun_#t~post7 - 1, test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume !(write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base]);" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume !(read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base]);" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem5 := read~int_#value;assume !!(test_fun_#t~mem5 > 0);havoc test_fun_#t~mem5;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume !#valid[read~int_#ptr.base];" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem5 := read~int_#value;assume !(test_fun_#t~mem5 > 0);havoc test_fun_#t~mem5;" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem5 := read~int_#value;assume !!(test_fun_#t~mem5 > 0);havoc test_fun_#t~mem5;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume !(read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base]);" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem1 := read~int_#value;assume !!(test_fun_#t~mem1 < 0);havoc test_fun_#t~mem1;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem2 := read~int_#value;test_fun_#t~post3 := test_fun_#t~mem2;write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := test_fun_#t~post3 + 1, test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume !#valid[write~int_#ptr.base];" },
	returnAlphabet = {},
	states = {"788#unseeded" "795#(<= 0 (+ (select (select |#memory_int| ULTIMATE.start_test_fun_~a.base) (+ ULTIMATE.start_test_fun_~a.offset (* ULTIMATE.start_test_fun_~i~2 4))) oldRank0))" "794#(and (<= 0 oldRank0) (<= 1 (+ (select (select |#memory_int| ULTIMATE.start_test_fun_~a.base) (+ ULTIMATE.start_test_fun_~a.offset (* ULTIMATE.start_test_fun_~i~2 4))) oldRank0)))" },
	initialStates = {"788#unseeded" },
	finalStates = {"794#(and (<= 0 oldRank0) (<= 1 (+ (select (select |#memory_int| ULTIMATE.start_test_fun_~a.base) (+ ULTIMATE.start_test_fun_~a.offset (* ULTIMATE.start_test_fun_~i~2 4))) oldRank0)))" },
	callTransitions = {
	},
	internalTransitions = {
		 ("788#unseeded" "#NULL.base, #NULL.offset := 0, 0;#valid := #valid[0 := false];havoc main_#res;havoc main_#t~nondet9, main_#t~malloc10.base, main_#t~malloc10.offset, main_~array_size~6, main_~numbers~6.base, main_~numbers~6.offset;main_~array_size~6 := main_#t~nondet9;havoc main_#t~nondet9;" "788#unseeded")
		 ("788#unseeded" "assume !(main_~array_size~6 < 1);" "788#unseeded")
		 ("788#unseeded" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem1 := read~int_#value;assume !!(test_fun_#t~mem1 < 0);havoc test_fun_#t~mem1;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem2 := read~int_#value;test_fun_#t~post3 := test_fun_#t~mem2;write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := test_fun_#t~post3 + 1, test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[write~int_#ptr.base];assume write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base];havoc #memory_int;assume #memory_int == write~int_old_#memory_int[write~int_#ptr.base,write~int_#ptr.offset := write~int_#value];havoc test_fun_#t~mem2;havoc test_fun_#t~post3;test_fun_#t~post4 := test_fun_~neg~2;test_fun_~neg~2 := test_fun_#t~post4 + 1;havoc test_fun_#t~post4;" "788#unseeded")
		 ("788#unseeded" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem1 := read~int_#value;assume !(test_fun_#t~mem1 < 0);havoc test_fun_#t~mem1;" "788#unseeded")
		 ("788#unseeded" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem5 := read~int_#value;assume !(test_fun_#t~mem5 > 0);havoc test_fun_#t~mem5;" "788#unseeded")
		 ("788#unseeded" "test_fun_#t~post0 := test_fun_~i~2;test_fun_~i~2 := test_fun_#t~post0 + 1;havoc test_fun_#t~post0;" "788#unseeded")
		 ("788#unseeded" "~malloc_old_#valid, ~malloc_old_#length := #valid, #length;~malloc_~size := main_~array_size~6 * 4;havoc ~malloc_#res.base, ~malloc_#res.offset;havoc #valid, #length;assume ~malloc_old_#valid[~malloc_#res.base] == false;assume #valid == ~malloc_old_#valid[~malloc_#res.base := true];assume ~malloc_#res.offset == 0;assume ~malloc_#res.base != 0;assume #length == ~malloc_old_#length[~malloc_#res.base := ~malloc_~size];main_#t~malloc10.base, main_#t~malloc10.offset := ~malloc_#res.base, ~malloc_#res.offset;main_~numbers~6.base, main_~numbers~6.offset := main_#t~malloc10.base, main_#t~malloc10.offset;test_fun_#in~a.base, test_fun_#in~a.offset, test_fun_#in~N := main_~numbers~6.base, main_~numbers~6.offset, main_~array_size~6;havoc test_fun_#t~mem2, test_fun_#t~post3, test_fun_#t~post4, test_fun_#t~mem1, test_fun_#t~mem6, test_fun_#t~post7, test_fun_#t~post8, test_fun_#t~mem5, test_fun_#t~post0, test_fun_~a.base, test_fun_~a.offset, test_fun_~N, test_fun_~i~2, test_fun_~pos~2, test_fun_~neg~2;test_fun_~a.base, test_fun_~a.offset := test_fun_#in~a.base, test_fun_#in~a.offset;test_fun_~N := test_fun_#in~N;havoc test_fun_~i~2;test_fun_~pos~2 := 0;test_fun_~neg~2 := 0;test_fun_~i~2 := 0;" "788#unseeded")
		 ("788#unseeded" "assume true;assume !!(test_fun_~i~2 < test_fun_~N);" "788#unseeded")
		 ("788#unseeded" "assume true;assume !!(test_fun_~i~2 < test_fun_~N);" "794#(and (<= 0 oldRank0) (<= 1 (+ (select (select |#memory_int| ULTIMATE.start_test_fun_~a.base) (+ ULTIMATE.start_test_fun_~a.offset (* ULTIMATE.start_test_fun_~i~2 4))) oldRank0)))")
		 ("788#unseeded" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem5 := read~int_#value;assume !!(test_fun_#t~mem5 > 0);havoc test_fun_#t~mem5;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem6 := read~int_#value;test_fun_#t~post7 := test_fun_#t~mem6;write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := test_fun_#t~post7 - 1, test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[write~int_#ptr.base];assume write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base];havoc #memory_int;assume #memory_int == write~int_old_#memory_int[write~int_#ptr.base,write~int_#ptr.offset := write~int_#value];havoc test_fun_#t~mem6;havoc test_fun_#t~post7;test_fun_#t~post8 := test_fun_~pos~2;test_fun_~pos~2 := test_fun_#t~post8 + 1;havoc test_fun_#t~post8;" "788#unseeded")
		 ("795#(<= 0 (+ (select (select |#memory_int| ULTIMATE.start_test_fun_~a.base) (+ ULTIMATE.start_test_fun_~a.offset (* ULTIMATE.start_test_fun_~i~2 4))) oldRank0))" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem5 := read~int_#value;assume !(test_fun_#t~mem5 > 0);havoc test_fun_#t~mem5;" "795#(<= 0 (+ (select (select |#memory_int| ULTIMATE.start_test_fun_~a.base) (+ ULTIMATE.start_test_fun_~a.offset (* ULTIMATE.start_test_fun_~i~2 4))) oldRank0))")
		 ("794#(and (<= 0 oldRank0) (<= 1 (+ (select (select |#memory_int| ULTIMATE.start_test_fun_~a.base) (+ ULTIMATE.start_test_fun_~a.offset (* ULTIMATE.start_test_fun_~i~2 4))) oldRank0)))" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem1 := read~int_#value;assume !!(test_fun_#t~mem1 < 0);havoc test_fun_#t~mem1;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem2 := read~int_#value;test_fun_#t~post3 := test_fun_#t~mem2;write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := test_fun_#t~post3 + 1, test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[write~int_#ptr.base];assume write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base];havoc #memory_int;assume #memory_int == write~int_old_#memory_int[write~int_#ptr.base,write~int_#ptr.offset := write~int_#value];havoc test_fun_#t~mem2;havoc test_fun_#t~post3;test_fun_#t~post4 := test_fun_~neg~2;test_fun_~neg~2 := test_fun_#t~post4 + 1;havoc test_fun_#t~post4;" "794#(and (<= 0 oldRank0) (<= 1 (+ (select (select |#memory_int| ULTIMATE.start_test_fun_~a.base) (+ ULTIMATE.start_test_fun_~a.offset (* ULTIMATE.start_test_fun_~i~2 4))) oldRank0)))")
		 ("794#(and (<= 0 oldRank0) (<= 1 (+ (select (select |#memory_int| ULTIMATE.start_test_fun_~a.base) (+ ULTIMATE.start_test_fun_~a.offset (* ULTIMATE.start_test_fun_~i~2 4))) oldRank0)))" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem1 := read~int_#value;assume !(test_fun_#t~mem1 < 0);havoc test_fun_#t~mem1;" "795#(<= 0 (+ (select (select |#memory_int| ULTIMATE.start_test_fun_~a.base) (+ ULTIMATE.start_test_fun_~a.offset (* ULTIMATE.start_test_fun_~i~2 4))) oldRank0))")
	},
	returnTransitions = {
	}
);
