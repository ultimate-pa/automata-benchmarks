// Testfile dumped by Ultimate at 2015/10/05 07:24:10
//
// RefinementSetting [m_InterpolantAutomaton=ScroogeNondeterminism, m_BouncerStem=true, m_BouncerLoop=false, m_ScroogeNondeterminismStem=true, m_ScroogeNondeterminismLoop=false, m_CannibalizeLoop=false, m_UsedDefinedMaxRank=-3]

NestedWordAutomaton nwa = (
	callAlphabet = {},
	internalAlphabet = {"write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := test_fun_~res~2, test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume !(write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base]);" "write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := test_fun_~res~2, test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[write~int_#ptr.base];assume write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base];havoc #memory_int;assume #memory_int == write~int_old_#memory_int[write~int_#ptr.base,write~int_#ptr.offset := write~int_#value];test_fun_#t~post0 := test_fun_~i~2;test_fun_~i~2 := test_fun_#t~post0 + 1;havoc test_fun_#t~post0;" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem3 := read~int_#value;assume !(test_fun_#t~mem3 > 0);havoc test_fun_#t~mem3;" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem3 := read~int_#value;assume !!(test_fun_#t~mem3 > 0);havoc test_fun_#t~mem3;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem4 := read~int_#value;test_fun_~res~2 := test_fun_~res~2 * test_fun_#t~mem4;havoc test_fun_#t~mem4;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem5 := read~int_#value;test_fun_#t~post6 := test_fun_#t~mem5;write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := test_fun_#t~post6 - 1, test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[write~int_#ptr.base];assume write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base];havoc #memory_int;assume #memory_int == write~int_old_#memory_int[write~int_#ptr.base,write~int_#ptr.offset := write~int_#value];havoc test_fun_#t~mem5;havoc test_fun_#t~post6;" "assume !true;" "assume test_fun_#t~mem2 < 0;havoc test_fun_#t~mem2;test_fun_~res~2 := 0;" "#NULL.base, #NULL.offset := 0, 0;#valid := #valid[0 := false];havoc main_#res;havoc main_#t~nondet8, main_#t~malloc9.base, main_#t~malloc9.offset, main_~array_size~7, main_~numbers~7.base, main_~numbers~7.offset;main_~array_size~7 := main_#t~nondet8;havoc main_#t~nondet8;" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem3 := read~int_#value;assume !!(test_fun_#t~mem3 > 0);havoc test_fun_#t~mem3;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem4 := read~int_#value;test_fun_~res~2 := test_fun_~res~2 * test_fun_#t~mem4;havoc test_fun_#t~mem4;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem5 := read~int_#value;test_fun_#t~post6 := test_fun_#t~mem5;write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := test_fun_#t~post6 - 1, test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume !#valid[write~int_#ptr.base];" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume !#valid[read~int_#ptr.base];" "assume !true;" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume !(read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base]);" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem3 := read~int_#value;assume !!(test_fun_#t~mem3 > 0);havoc test_fun_#t~mem3;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem4 := read~int_#value;test_fun_~res~2 := test_fun_~res~2 * test_fun_#t~mem4;havoc test_fun_#t~mem4;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem5 := read~int_#value;test_fun_#t~post6 := test_fun_#t~mem5;write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := test_fun_#t~post6 - 1, test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume !(write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base]);" "assume !(main_~array_size~7 < 1);" "write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := test_fun_~res~2, test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume !#valid[write~int_#ptr.base];" "~malloc_old_#valid, ~malloc_old_#length := #valid, #length;~malloc_~size := main_~array_size~7 * 4;havoc ~malloc_#res.base, ~malloc_#res.offset;havoc #valid, #length;assume ~malloc_old_#valid[~malloc_#res.base] == false;assume #valid == ~malloc_old_#valid[~malloc_#res.base := true];assume ~malloc_#res.offset == 0;assume ~malloc_#res.base != 0;assume #length == ~malloc_old_#length[~malloc_#res.base := ~malloc_~size];main_#t~malloc9.base, main_#t~malloc9.offset := ~malloc_#res.base, ~malloc_#res.offset;main_~numbers~7.base, main_~numbers~7.offset := main_#t~malloc9.base, main_#t~malloc9.offset;test_fun_#in~a.base, test_fun_#in~a.offset, test_fun_#in~N := main_~numbers~7.base, main_~numbers~7.offset, main_~array_size~7;havoc test_fun_#t~mem1, test_fun_#t~mem2, test_fun_#t~mem4, test_fun_#t~mem5, test_fun_#t~post6, test_fun_#t~mem3, test_fun_#t~post0, test_fun_~a.base, test_fun_~a.offset, test_fun_~N, test_fun_~i~2, test_fun_~res~2;test_fun_~a.base, test_fun_~a.offset := test_fun_#in~a.base, test_fun_#in~a.offset;test_fun_~N := test_fun_#in~N;havoc test_fun_~i~2;havoc test_fun_~res~2;test_fun_~i~2 := 0;" "~free_old_#valid := #valid;~free_~addr.base, ~free_~addr.offset := main_#t~malloc9.base, main_#t~malloc9.offset;assume true;assume !#valid[~free_~addr.base];" "~free_old_#valid := #valid;~free_~addr.base, ~free_~addr.offset := main_#t~malloc9.base, main_#t~malloc9.offset;assume true;assume true;assume ~free_~addr.offset == 0;assume #valid[~free_~addr.base];havoc #valid;assume #valid == ~free_old_#valid[~free_~addr.base := false];havoc main_#t~malloc9.base, main_#t~malloc9.offset;#t~ret10 := main_#res;assume true;" "assume !!(test_fun_~i~2 < test_fun_~N);test_fun_~res~2 := 1;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;" "assume !#valid[read~int_#ptr.base];" "assume true;" "assume main_~array_size~7 < 1;main_~array_size~7 := 1;" "~free_old_#valid := #valid;~free_~addr.base, ~free_~addr.offset := main_#t~malloc9.base, main_#t~malloc9.offset;assume !(~free_~addr.offset == 0);" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem3 := read~int_#value;assume !!(test_fun_#t~mem3 > 0);havoc test_fun_#t~mem3;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem4 := read~int_#value;test_fun_~res~2 := test_fun_~res~2 * test_fun_#t~mem4;havoc test_fun_#t~mem4;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume !(read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base]);" "assume !(test_fun_~i~2 < test_fun_~N);" "assume test_fun_#t~mem1 == 0;havoc test_fun_#t~mem1;test_fun_~res~2 := 1;" "assume !(read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base]);" "assume true;" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem3 := read~int_#value;assume !!(test_fun_#t~mem3 > 0);havoc test_fun_#t~mem3;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume !(read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base]);" "assume !#valid[read~int_#ptr.base];" "assume !(test_fun_#t~mem1 == 0);havoc test_fun_#t~mem1;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;" "assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem1 := read~int_#value;" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem3 := read~int_#value;assume !!(test_fun_#t~mem3 > 0);havoc test_fun_#t~mem3;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume !#valid[read~int_#ptr.base];" "assume !(read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base]);" "assume true;" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem3 := read~int_#value;assume !!(test_fun_#t~mem3 > 0);havoc test_fun_#t~mem3;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem4 := read~int_#value;test_fun_~res~2 := test_fun_~res~2 * test_fun_#t~mem4;havoc test_fun_#t~mem4;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume !#valid[read~int_#ptr.base];" "assume !(test_fun_#t~mem2 < 0);havoc test_fun_#t~mem2;" "assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem2 := read~int_#value;" },
	returnAlphabet = {},
	states = {"2348#unseeded" "2365#(<= (select (select |#memory_int| ULTIMATE.start_test_fun_~a.base) (+ ULTIMATE.start_test_fun_~a.offset (* ULTIMATE.start_test_fun_~i~2 4))) oldRank0)" "2364#(and (<= 0 oldRank0) (<= (+ (select (select |#memory_int| ULTIMATE.start_test_fun_~a.base) (+ ULTIMATE.start_test_fun_~a.offset (* ULTIMATE.start_test_fun_~i~2 4))) 1) oldRank0))" },
	initialStates = {"2348#unseeded" },
	finalStates = {"2364#(and (<= 0 oldRank0) (<= (+ (select (select |#memory_int| ULTIMATE.start_test_fun_~a.base) (+ ULTIMATE.start_test_fun_~a.offset (* ULTIMATE.start_test_fun_~i~2 4))) 1) oldRank0))" },
	callTransitions = {
	},
	internalTransitions = {
		 ("2348#unseeded" "write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := test_fun_~res~2, test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[write~int_#ptr.base];assume write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base];havoc #memory_int;assume #memory_int == write~int_old_#memory_int[write~int_#ptr.base,write~int_#ptr.offset := write~int_#value];test_fun_#t~post0 := test_fun_~i~2;test_fun_~i~2 := test_fun_#t~post0 + 1;havoc test_fun_#t~post0;" "2348#unseeded")
		 ("2348#unseeded" "assume !!(test_fun_~i~2 < test_fun_~N);test_fun_~res~2 := 1;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;" "2348#unseeded")
		 ("2348#unseeded" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem3 := read~int_#value;assume !(test_fun_#t~mem3 > 0);havoc test_fun_#t~mem3;" "2348#unseeded")
		 ("2348#unseeded" "assume true;" "2348#unseeded")
		 ("2348#unseeded" "assume main_~array_size~7 < 1;main_~array_size~7 := 1;" "2348#unseeded")
		 ("2348#unseeded" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem3 := read~int_#value;assume !!(test_fun_#t~mem3 > 0);havoc test_fun_#t~mem3;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem4 := read~int_#value;test_fun_~res~2 := test_fun_~res~2 * test_fun_#t~mem4;havoc test_fun_#t~mem4;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem5 := read~int_#value;test_fun_#t~post6 := test_fun_#t~mem5;write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := test_fun_#t~post6 - 1, test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[write~int_#ptr.base];assume write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base];havoc #memory_int;assume #memory_int == write~int_old_#memory_int[write~int_#ptr.base,write~int_#ptr.offset := write~int_#value];havoc test_fun_#t~mem5;havoc test_fun_#t~post6;" "2348#unseeded")
		 ("2348#unseeded" "assume test_fun_#t~mem1 == 0;havoc test_fun_#t~mem1;test_fun_~res~2 := 1;" "2348#unseeded")
		 ("2348#unseeded" "assume true;" "2348#unseeded")
		 ("2348#unseeded" "assume test_fun_#t~mem2 < 0;havoc test_fun_#t~mem2;test_fun_~res~2 := 0;" "2348#unseeded")
		 ("2348#unseeded" "#NULL.base, #NULL.offset := 0, 0;#valid := #valid[0 := false];havoc main_#res;havoc main_#t~nondet8, main_#t~malloc9.base, main_#t~malloc9.offset, main_~array_size~7, main_~numbers~7.base, main_~numbers~7.offset;main_~array_size~7 := main_#t~nondet8;havoc main_#t~nondet8;" "2348#unseeded")
		 ("2348#unseeded" "assume !(test_fun_#t~mem1 == 0);havoc test_fun_#t~mem1;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;" "2348#unseeded")
		 ("2348#unseeded" "assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem1 := read~int_#value;" "2348#unseeded")
		 ("2348#unseeded" "assume true;" "2348#unseeded")
		 ("2348#unseeded" "assume !(main_~array_size~7 < 1);" "2348#unseeded")
		 ("2348#unseeded" "assume !(test_fun_#t~mem2 < 0);havoc test_fun_#t~mem2;" "2348#unseeded")
		 ("2348#unseeded" "assume !(test_fun_#t~mem2 < 0);havoc test_fun_#t~mem2;" "2364#(and (<= 0 oldRank0) (<= (+ (select (select |#memory_int| ULTIMATE.start_test_fun_~a.base) (+ ULTIMATE.start_test_fun_~a.offset (* ULTIMATE.start_test_fun_~i~2 4))) 1) oldRank0))")
		 ("2348#unseeded" "~malloc_old_#valid, ~malloc_old_#length := #valid, #length;~malloc_~size := main_~array_size~7 * 4;havoc ~malloc_#res.base, ~malloc_#res.offset;havoc #valid, #length;assume ~malloc_old_#valid[~malloc_#res.base] == false;assume #valid == ~malloc_old_#valid[~malloc_#res.base := true];assume ~malloc_#res.offset == 0;assume ~malloc_#res.base != 0;assume #length == ~malloc_old_#length[~malloc_#res.base := ~malloc_~size];main_#t~malloc9.base, main_#t~malloc9.offset := ~malloc_#res.base, ~malloc_#res.offset;main_~numbers~7.base, main_~numbers~7.offset := main_#t~malloc9.base, main_#t~malloc9.offset;test_fun_#in~a.base, test_fun_#in~a.offset, test_fun_#in~N := main_~numbers~7.base, main_~numbers~7.offset, main_~array_size~7;havoc test_fun_#t~mem1, test_fun_#t~mem2, test_fun_#t~mem4, test_fun_#t~mem5, test_fun_#t~post6, test_fun_#t~mem3, test_fun_#t~post0, test_fun_~a.base, test_fun_~a.offset, test_fun_~N, test_fun_~i~2, test_fun_~res~2;test_fun_~a.base, test_fun_~a.offset := test_fun_#in~a.base, test_fun_#in~a.offset;test_fun_~N := test_fun_#in~N;havoc test_fun_~i~2;havoc test_fun_~res~2;test_fun_~i~2 := 0;" "2348#unseeded")
		 ("2348#unseeded" "assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem2 := read~int_#value;" "2348#unseeded")
		 ("2364#(and (<= 0 oldRank0) (<= (+ (select (select |#memory_int| ULTIMATE.start_test_fun_~a.base) (+ ULTIMATE.start_test_fun_~a.offset (* ULTIMATE.start_test_fun_~i~2 4))) 1) oldRank0))" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem3 := read~int_#value;assume !(test_fun_#t~mem3 > 0);havoc test_fun_#t~mem3;" "2365#(<= (select (select |#memory_int| ULTIMATE.start_test_fun_~a.base) (+ ULTIMATE.start_test_fun_~a.offset (* ULTIMATE.start_test_fun_~i~2 4))) oldRank0)")
		 ("2364#(and (<= 0 oldRank0) (<= (+ (select (select |#memory_int| ULTIMATE.start_test_fun_~a.base) (+ ULTIMATE.start_test_fun_~a.offset (* ULTIMATE.start_test_fun_~i~2 4))) 1) oldRank0))" "assume true;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem3 := read~int_#value;assume !!(test_fun_#t~mem3 > 0);havoc test_fun_#t~mem3;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem4 := read~int_#value;test_fun_~res~2 := test_fun_~res~2 * test_fun_#t~mem4;havoc test_fun_#t~mem4;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];test_fun_#t~mem5 := read~int_#value;test_fun_#t~post6 := test_fun_#t~mem5;write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := test_fun_#t~post6 - 1, test_fun_~a.base, test_fun_~a.offset + test_fun_~i~2 * 4, 4;assume true;assume true;assume #valid[write~int_#ptr.base];assume write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base];havoc #memory_int;assume #memory_int == write~int_old_#memory_int[write~int_#ptr.base,write~int_#ptr.offset := write~int_#value];havoc test_fun_#t~mem5;havoc test_fun_#t~post6;" "2364#(and (<= 0 oldRank0) (<= (+ (select (select |#memory_int| ULTIMATE.start_test_fun_~a.base) (+ ULTIMATE.start_test_fun_~a.offset (* ULTIMATE.start_test_fun_~i~2 4))) 1) oldRank0))")
	},
	returnTransitions = {
	}
);
