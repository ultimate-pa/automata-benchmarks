// Testfile dumped by Ultimate at 2015/10/05 11:03:35
//
// RefinementSetting [m_InterpolantAutomaton=ScroogeNondeterminism, m_BouncerStem=true, m_BouncerLoop=false, m_ScroogeNondeterminismStem=true, m_ScroogeNondeterminismLoop=false, m_CannibalizeLoop=false, m_UsedDefinedMaxRank=-3]

NestedWordAutomaton nwa = (
	callAlphabet = {},
	internalAlphabet = {"assume !!insertionSort_#t~short4;havoc insertionSort_#t~mem3;havoc insertionSort_#t~short4;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := insertionSort_~a.base, insertionSort_~a.offset + (insertionSort_~j~2 - 1) * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];insertionSort_#t~mem6 := read~int_#value;write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := insertionSort_#t~mem6, insertionSort_~a.base, insertionSort_~a.offset + insertionSort_~j~2 * 4, 4;assume true;assume true;assume #valid[write~int_#ptr.base];assume write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base];havoc #memory_int;assume #memory_int == write~int_old_#memory_int[write~int_#ptr.base,write~int_#ptr.offset := write~int_#value];havoc insertionSort_#t~mem6;insertionSort_#t~post2 := insertionSort_~j~2;insertionSort_~j~2 := insertionSort_#t~post2 - 1;havoc insertionSort_#t~post2;" "assume !(main_~array_size~5 < 1);" "assume insertionSort_#t~short4;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := insertionSort_~a.base, insertionSort_~a.offset + (insertionSort_~j~2 - 1) * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];insertionSort_#t~mem3 := read~int_#value;insertionSort_#t~short4 := insertionSort_#t~mem3 > insertionSort_~index~2;" "~malloc_old_#valid, ~malloc_old_#length := #valid, #length;~malloc_~size := main_~array_size~5 * 4;havoc ~malloc_#res.base, ~malloc_#res.offset;havoc #valid, #length;assume ~malloc_old_#valid[~malloc_#res.base] == false;assume #valid == ~malloc_old_#valid[~malloc_#res.base := true];assume ~malloc_#res.offset == 0;assume ~malloc_#res.base != 0;assume #length == ~malloc_old_#length[~malloc_#res.base := ~malloc_~size];main_#t~malloc9.base, main_#t~malloc9.offset := ~malloc_#res.base, ~malloc_#res.offset;main_~a~5.base, main_~a~5.offset := main_#t~malloc9.base, main_#t~malloc9.offset;insertionSort_#in~a.base, insertionSort_#in~a.offset, insertionSort_#in~array_size := main_~a~5.base, main_~a~5.offset, main_~array_size~5;havoc insertionSort_#t~mem1, insertionSort_#t~mem6, insertionSort_#t~post2, insertionSort_#t~mem3, insertionSort_#t~short4, insertionSort_#t~pre0, insertionSort_~a.base, insertionSort_~a.offset, insertionSort_~array_size, insertionSort_~i~2, insertionSort_~j~2, insertionSort_~index~2;insertionSort_~a.base, insertionSort_~a.offset := insertionSort_#in~a.base, insertionSort_#in~a.offset;insertionSort_~array_size := insertionSort_#in~array_size;havoc insertionSort_~i~2;havoc insertionSort_~j~2;havoc insertionSort_~index~2;insertionSort_~i~2 := 1;" "#NULL.base, #NULL.offset := 0, 0;#valid := #valid[0 := false];havoc main_#res;havoc main_#t~nondet8, main_#t~malloc9.base, main_#t~malloc9.offset, main_~array_size~5, main_~a~5.base, main_~a~5.offset;main_~array_size~5 := main_#t~nondet8;havoc main_#t~nondet8;" "assume !!insertionSort_#t~short4;havoc insertionSort_#t~mem3;havoc insertionSort_#t~short4;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := insertionSort_~a.base, insertionSort_~a.offset + (insertionSort_~j~2 - 1) * 4, 4;assume true;assume !(read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base]);" "assume true;assume !!(insertionSort_~i~2 < insertionSort_~array_size);read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := insertionSort_~a.base, insertionSort_~a.offset + insertionSort_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];insertionSort_#t~mem1 := read~int_#value;insertionSort_~index~2 := insertionSort_#t~mem1;havoc insertionSort_#t~mem1;insertionSort_~j~2 := insertionSort_~i~2;" "assume !true;" "assume !!insertionSort_#t~short4;havoc insertionSort_#t~mem3;havoc insertionSort_#t~short4;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := insertionSort_~a.base, insertionSort_~a.offset + (insertionSort_~j~2 - 1) * 4, 4;assume !#valid[read~int_#ptr.base];" "assume !insertionSort_#t~short4;havoc insertionSort_#t~mem3;havoc insertionSort_#t~short4;" "assume !!insertionSort_#t~short4;havoc insertionSort_#t~mem3;havoc insertionSort_#t~short4;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := insertionSort_~a.base, insertionSort_~a.offset + (insertionSort_~j~2 - 1) * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];insertionSort_#t~mem6 := read~int_#value;write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := insertionSort_#t~mem6, insertionSort_~a.base, insertionSort_~a.offset + insertionSort_~j~2 * 4, 4;assume true;assume !(write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base]);" "assume !!insertionSort_#t~short4;havoc insertionSort_#t~mem3;havoc insertionSort_#t~short4;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := insertionSort_~a.base, insertionSort_~a.offset + (insertionSort_~j~2 - 1) * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];insertionSort_#t~mem6 := read~int_#value;write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := insertionSort_#t~mem6, insertionSort_~a.base, insertionSort_~a.offset + insertionSort_~j~2 * 4, 4;assume !#valid[write~int_#ptr.base];" "write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := insertionSort_~index~2, insertionSort_~a.base, insertionSort_~a.offset + insertionSort_~j~2 * 4, 4;assume true;assume true;assume #valid[write~int_#ptr.base];assume write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base];havoc #memory_int;assume #memory_int == write~int_old_#memory_int[write~int_#ptr.base,write~int_#ptr.offset := write~int_#value];insertionSort_#t~pre0 := insertionSort_~i~2 + 1;insertionSort_~i~2 := insertionSort_~i~2 + 1;havoc insertionSort_#t~pre0;" "assume true;assume !(insertionSort_~i~2 < insertionSort_~array_size);" "assume main_~array_size~5 < 1;main_~array_size~5 := 1;" "assume true;assume !!(insertionSort_~i~2 < insertionSort_~array_size);read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := insertionSort_~a.base, insertionSort_~a.offset + insertionSort_~i~2 * 4, 4;assume !#valid[read~int_#ptr.base];" "assume true;assume !!(insertionSort_~i~2 < insertionSort_~array_size);read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := insertionSort_~a.base, insertionSort_~a.offset + insertionSort_~i~2 * 4, 4;assume true;assume !(read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base]);" "assume insertionSort_#t~short4;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := insertionSort_~a.base, insertionSort_~a.offset + (insertionSort_~j~2 - 1) * 4, 4;assume true;assume !(read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base]);" "main_#res := 0;~free_old_#valid := #valid;~free_~addr.base, ~free_~addr.offset := main_#t~malloc9.base, main_#t~malloc9.offset;assume true;assume true;assume ~free_~addr.offset == 0;assume #valid[~free_~addr.base];havoc #valid;assume #valid == ~free_old_#valid[~free_~addr.base := false];havoc main_#t~malloc9.base, main_#t~malloc9.offset;#t~ret10 := main_#res;assume true;" "assume !insertionSort_#t~short4;" "assume insertionSort_#t~short4;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := insertionSort_~a.base, insertionSort_~a.offset + (insertionSort_~j~2 - 1) * 4, 4;assume !#valid[read~int_#ptr.base];" "assume !true;" "main_#res := 0;~free_old_#valid := #valid;~free_~addr.base, ~free_~addr.offset := main_#t~malloc9.base, main_#t~malloc9.offset;assume !(~free_~addr.offset == 0);" "main_#res := 0;~free_old_#valid := #valid;~free_~addr.base, ~free_~addr.offset := main_#t~malloc9.base, main_#t~malloc9.offset;assume true;assume !#valid[~free_~addr.base];" "assume true;insertionSort_#t~short4 := insertionSort_~j~2 > 0;" "write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := insertionSort_~index~2, insertionSort_~a.base, insertionSort_~a.offset + insertionSort_~j~2 * 4, 4;assume !#valid[write~int_#ptr.base];" "write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := insertionSort_~index~2, insertionSort_~a.base, insertionSort_~a.offset + insertionSort_~j~2 * 4, 4;assume true;assume !(write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base]);" },
	returnAlphabet = {},
	states = {"987#(and (<= (+ ULTIMATE.start_insertionSort_~j~2 1) oldRank0) (<= ULTIMATE.start_insertionSort_~j~2 oldRank0) (= |ULTIMATE.start_insertionSort_#t~short4| (<= 1 ULTIMATE.start_insertionSort_~j~2)))" "974#(<= ULTIMATE.start_insertionSort_~j~2 oldRank0)" "973#(and (<= (+ ULTIMATE.start_insertionSort_~j~2 1) oldRank0) (<= 0 oldRank0))" "978#(and (<= (+ ULTIMATE.start_insertionSort_~j~2 1) oldRank0) (<= ULTIMATE.start_insertionSort_~j~2 oldRank0))" "964#unseeded" },
	initialStates = {"964#unseeded" },
	finalStates = {"973#(and (<= (+ ULTIMATE.start_insertionSort_~j~2 1) oldRank0) (<= 0 oldRank0))" },
	callTransitions = {
	},
	internalTransitions = {
		 ("987#(and (<= (+ ULTIMATE.start_insertionSort_~j~2 1) oldRank0) (<= ULTIMATE.start_insertionSort_~j~2 oldRank0) (= |ULTIMATE.start_insertionSort_#t~short4| (<= 1 ULTIMATE.start_insertionSort_~j~2)))" "assume !!insertionSort_#t~short4;havoc insertionSort_#t~mem3;havoc insertionSort_#t~short4;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := insertionSort_~a.base, insertionSort_~a.offset + (insertionSort_~j~2 - 1) * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];insertionSort_#t~mem6 := read~int_#value;write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := insertionSort_#t~mem6, insertionSort_~a.base, insertionSort_~a.offset + insertionSort_~j~2 * 4, 4;assume true;assume true;assume #valid[write~int_#ptr.base];assume write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base];havoc #memory_int;assume #memory_int == write~int_old_#memory_int[write~int_#ptr.base,write~int_#ptr.offset := write~int_#value];havoc insertionSort_#t~mem6;insertionSort_#t~post2 := insertionSort_~j~2;insertionSort_~j~2 := insertionSort_#t~post2 - 1;havoc insertionSort_#t~post2;" "973#(and (<= (+ ULTIMATE.start_insertionSort_~j~2 1) oldRank0) (<= 0 oldRank0))")
		 ("987#(and (<= (+ ULTIMATE.start_insertionSort_~j~2 1) oldRank0) (<= ULTIMATE.start_insertionSort_~j~2 oldRank0) (= |ULTIMATE.start_insertionSort_#t~short4| (<= 1 ULTIMATE.start_insertionSort_~j~2)))" "assume !insertionSort_#t~short4;havoc insertionSort_#t~mem3;havoc insertionSort_#t~short4;" "978#(and (<= (+ ULTIMATE.start_insertionSort_~j~2 1) oldRank0) (<= ULTIMATE.start_insertionSort_~j~2 oldRank0))")
		 ("987#(and (<= (+ ULTIMATE.start_insertionSort_~j~2 1) oldRank0) (<= ULTIMATE.start_insertionSort_~j~2 oldRank0) (= |ULTIMATE.start_insertionSort_#t~short4| (<= 1 ULTIMATE.start_insertionSort_~j~2)))" "assume insertionSort_#t~short4;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := insertionSort_~a.base, insertionSort_~a.offset + (insertionSort_~j~2 - 1) * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];insertionSort_#t~mem3 := read~int_#value;insertionSort_#t~short4 := insertionSort_#t~mem3 > insertionSort_~index~2;" "973#(and (<= (+ ULTIMATE.start_insertionSort_~j~2 1) oldRank0) (<= 0 oldRank0))")
		 ("987#(and (<= (+ ULTIMATE.start_insertionSort_~j~2 1) oldRank0) (<= ULTIMATE.start_insertionSort_~j~2 oldRank0) (= |ULTIMATE.start_insertionSort_#t~short4| (<= 1 ULTIMATE.start_insertionSort_~j~2)))" "assume !insertionSort_#t~short4;" "987#(and (<= (+ ULTIMATE.start_insertionSort_~j~2 1) oldRank0) (<= ULTIMATE.start_insertionSort_~j~2 oldRank0) (= |ULTIMATE.start_insertionSort_#t~short4| (<= 1 ULTIMATE.start_insertionSort_~j~2)))")
		 ("974#(<= ULTIMATE.start_insertionSort_~j~2 oldRank0)" "assume !!insertionSort_#t~short4;havoc insertionSort_#t~mem3;havoc insertionSort_#t~short4;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := insertionSort_~a.base, insertionSort_~a.offset + (insertionSort_~j~2 - 1) * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];insertionSort_#t~mem6 := read~int_#value;write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := insertionSort_#t~mem6, insertionSort_~a.base, insertionSort_~a.offset + insertionSort_~j~2 * 4, 4;assume true;assume true;assume #valid[write~int_#ptr.base];assume write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base];havoc #memory_int;assume #memory_int == write~int_old_#memory_int[write~int_#ptr.base,write~int_#ptr.offset := write~int_#value];havoc insertionSort_#t~mem6;insertionSort_#t~post2 := insertionSort_~j~2;insertionSort_~j~2 := insertionSort_#t~post2 - 1;havoc insertionSort_#t~post2;" "978#(and (<= (+ ULTIMATE.start_insertionSort_~j~2 1) oldRank0) (<= ULTIMATE.start_insertionSort_~j~2 oldRank0))")
		 ("974#(<= ULTIMATE.start_insertionSort_~j~2 oldRank0)" "assume !insertionSort_#t~short4;havoc insertionSort_#t~mem3;havoc insertionSort_#t~short4;" "974#(<= ULTIMATE.start_insertionSort_~j~2 oldRank0)")
		 ("974#(<= ULTIMATE.start_insertionSort_~j~2 oldRank0)" "assume insertionSort_#t~short4;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := insertionSort_~a.base, insertionSort_~a.offset + (insertionSort_~j~2 - 1) * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];insertionSort_#t~mem3 := read~int_#value;insertionSort_#t~short4 := insertionSort_#t~mem3 > insertionSort_~index~2;" "974#(<= ULTIMATE.start_insertionSort_~j~2 oldRank0)")
		 ("974#(<= ULTIMATE.start_insertionSort_~j~2 oldRank0)" "assume !insertionSort_#t~short4;" "974#(<= ULTIMATE.start_insertionSort_~j~2 oldRank0)")
		 ("974#(<= ULTIMATE.start_insertionSort_~j~2 oldRank0)" "write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := insertionSort_~index~2, insertionSort_~a.base, insertionSort_~a.offset + insertionSort_~j~2 * 4, 4;assume true;assume true;assume #valid[write~int_#ptr.base];assume write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base];havoc #memory_int;assume #memory_int == write~int_old_#memory_int[write~int_#ptr.base,write~int_#ptr.offset := write~int_#value];insertionSort_#t~pre0 := insertionSort_~i~2 + 1;insertionSort_~i~2 := insertionSort_~i~2 + 1;havoc insertionSort_#t~pre0;" "974#(<= ULTIMATE.start_insertionSort_~j~2 oldRank0)")
		 ("973#(and (<= (+ ULTIMATE.start_insertionSort_~j~2 1) oldRank0) (<= 0 oldRank0))" "assume !!insertionSort_#t~short4;havoc insertionSort_#t~mem3;havoc insertionSort_#t~short4;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := insertionSort_~a.base, insertionSort_~a.offset + (insertionSort_~j~2 - 1) * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];insertionSort_#t~mem6 := read~int_#value;write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := insertionSort_#t~mem6, insertionSort_~a.base, insertionSort_~a.offset + insertionSort_~j~2 * 4, 4;assume true;assume true;assume #valid[write~int_#ptr.base];assume write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base];havoc #memory_int;assume #memory_int == write~int_old_#memory_int[write~int_#ptr.base,write~int_#ptr.offset := write~int_#value];havoc insertionSort_#t~mem6;insertionSort_#t~post2 := insertionSort_~j~2;insertionSort_~j~2 := insertionSort_#t~post2 - 1;havoc insertionSort_#t~post2;" "978#(and (<= (+ ULTIMATE.start_insertionSort_~j~2 1) oldRank0) (<= ULTIMATE.start_insertionSort_~j~2 oldRank0))")
		 ("973#(and (<= (+ ULTIMATE.start_insertionSort_~j~2 1) oldRank0) (<= 0 oldRank0))" "assume !insertionSort_#t~short4;havoc insertionSort_#t~mem3;havoc insertionSort_#t~short4;" "974#(<= ULTIMATE.start_insertionSort_~j~2 oldRank0)")
		 ("973#(and (<= (+ ULTIMATE.start_insertionSort_~j~2 1) oldRank0) (<= 0 oldRank0))" "assume true;insertionSort_#t~short4 := insertionSort_~j~2 > 0;" "974#(<= ULTIMATE.start_insertionSort_~j~2 oldRank0)")
		 ("978#(and (<= (+ ULTIMATE.start_insertionSort_~j~2 1) oldRank0) (<= ULTIMATE.start_insertionSort_~j~2 oldRank0))" "assume true;insertionSort_#t~short4 := insertionSort_~j~2 > 0;" "987#(and (<= (+ ULTIMATE.start_insertionSort_~j~2 1) oldRank0) (<= ULTIMATE.start_insertionSort_~j~2 oldRank0) (= |ULTIMATE.start_insertionSort_#t~short4| (<= 1 ULTIMATE.start_insertionSort_~j~2)))")
		 ("978#(and (<= (+ ULTIMATE.start_insertionSort_~j~2 1) oldRank0) (<= ULTIMATE.start_insertionSort_~j~2 oldRank0))" "write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := insertionSort_~index~2, insertionSort_~a.base, insertionSort_~a.offset + insertionSort_~j~2 * 4, 4;assume true;assume true;assume #valid[write~int_#ptr.base];assume write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base];havoc #memory_int;assume #memory_int == write~int_old_#memory_int[write~int_#ptr.base,write~int_#ptr.offset := write~int_#value];insertionSort_#t~pre0 := insertionSort_~i~2 + 1;insertionSort_~i~2 := insertionSort_~i~2 + 1;havoc insertionSort_#t~pre0;" "978#(and (<= (+ ULTIMATE.start_insertionSort_~j~2 1) oldRank0) (<= ULTIMATE.start_insertionSort_~j~2 oldRank0))")
		 ("964#unseeded" "assume true;assume !!(insertionSort_~i~2 < insertionSort_~array_size);read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := insertionSort_~a.base, insertionSort_~a.offset + insertionSort_~i~2 * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];insertionSort_#t~mem1 := read~int_#value;insertionSort_~index~2 := insertionSort_#t~mem1;havoc insertionSort_#t~mem1;insertionSort_~j~2 := insertionSort_~i~2;" "964#unseeded")
		 ("964#unseeded" "assume main_~array_size~5 < 1;main_~array_size~5 := 1;" "964#unseeded")
		 ("964#unseeded" "assume !!insertionSort_#t~short4;havoc insertionSort_#t~mem3;havoc insertionSort_#t~short4;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := insertionSort_~a.base, insertionSort_~a.offset + (insertionSort_~j~2 - 1) * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];insertionSort_#t~mem6 := read~int_#value;write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := insertionSort_#t~mem6, insertionSort_~a.base, insertionSort_~a.offset + insertionSort_~j~2 * 4, 4;assume true;assume true;assume #valid[write~int_#ptr.base];assume write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base];havoc #memory_int;assume #memory_int == write~int_old_#memory_int[write~int_#ptr.base,write~int_#ptr.offset := write~int_#value];havoc insertionSort_#t~mem6;insertionSort_#t~post2 := insertionSort_~j~2;insertionSort_~j~2 := insertionSort_#t~post2 - 1;havoc insertionSort_#t~post2;" "964#unseeded")
		 ("964#unseeded" "assume !insertionSort_#t~short4;havoc insertionSort_#t~mem3;havoc insertionSort_#t~short4;" "964#unseeded")
		 ("964#unseeded" "assume true;insertionSort_#t~short4 := insertionSort_~j~2 > 0;" "964#unseeded")
		 ("964#unseeded" "assume !(main_~array_size~5 < 1);" "964#unseeded")
		 ("964#unseeded" "assume insertionSort_#t~short4;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := insertionSort_~a.base, insertionSort_~a.offset + (insertionSort_~j~2 - 1) * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];insertionSort_#t~mem3 := read~int_#value;insertionSort_#t~short4 := insertionSort_#t~mem3 > insertionSort_~index~2;" "973#(and (<= (+ ULTIMATE.start_insertionSort_~j~2 1) oldRank0) (<= 0 oldRank0))")
		 ("964#unseeded" "assume insertionSort_#t~short4;read~int_#ptr.base, read~int_#ptr.offset, read~int_#sizeOfReadType := insertionSort_~a.base, insertionSort_~a.offset + (insertionSort_~j~2 - 1) * 4, 4;assume true;assume true;assume #valid[read~int_#ptr.base];assume read~int_#sizeOfReadType + read~int_#ptr.offset <= #length[read~int_#ptr.base];havoc read~int_#value;assume read~int_#value == #memory_int[read~int_#ptr.base,read~int_#ptr.offset];insertionSort_#t~mem3 := read~int_#value;insertionSort_#t~short4 := insertionSort_#t~mem3 > insertionSort_~index~2;" "964#unseeded")
		 ("964#unseeded" "~malloc_old_#valid, ~malloc_old_#length := #valid, #length;~malloc_~size := main_~array_size~5 * 4;havoc ~malloc_#res.base, ~malloc_#res.offset;havoc #valid, #length;assume ~malloc_old_#valid[~malloc_#res.base] == false;assume #valid == ~malloc_old_#valid[~malloc_#res.base := true];assume ~malloc_#res.offset == 0;assume ~malloc_#res.base != 0;assume #length == ~malloc_old_#length[~malloc_#res.base := ~malloc_~size];main_#t~malloc9.base, main_#t~malloc9.offset := ~malloc_#res.base, ~malloc_#res.offset;main_~a~5.base, main_~a~5.offset := main_#t~malloc9.base, main_#t~malloc9.offset;insertionSort_#in~a.base, insertionSort_#in~a.offset, insertionSort_#in~array_size := main_~a~5.base, main_~a~5.offset, main_~array_size~5;havoc insertionSort_#t~mem1, insertionSort_#t~mem6, insertionSort_#t~post2, insertionSort_#t~mem3, insertionSort_#t~short4, insertionSort_#t~pre0, insertionSort_~a.base, insertionSort_~a.offset, insertionSort_~array_size, insertionSort_~i~2, insertionSort_~j~2, insertionSort_~index~2;insertionSort_~a.base, insertionSort_~a.offset := insertionSort_#in~a.base, insertionSort_#in~a.offset;insertionSort_~array_size := insertionSort_#in~array_size;havoc insertionSort_~i~2;havoc insertionSort_~j~2;havoc insertionSort_~index~2;insertionSort_~i~2 := 1;" "964#unseeded")
		 ("964#unseeded" "assume !insertionSort_#t~short4;" "964#unseeded")
		 ("964#unseeded" "write~int_old_#memory_int := #memory_int;write~int_#value, write~int_#ptr.base, write~int_#ptr.offset, write~int_#sizeOfWrittenType := insertionSort_~index~2, insertionSort_~a.base, insertionSort_~a.offset + insertionSort_~j~2 * 4, 4;assume true;assume true;assume #valid[write~int_#ptr.base];assume write~int_#sizeOfWrittenType + write~int_#ptr.offset <= #length[write~int_#ptr.base];havoc #memory_int;assume #memory_int == write~int_old_#memory_int[write~int_#ptr.base,write~int_#ptr.offset := write~int_#value];insertionSort_#t~pre0 := insertionSort_~i~2 + 1;insertionSort_~i~2 := insertionSort_~i~2 + 1;havoc insertionSort_#t~pre0;" "964#unseeded")
		 ("964#unseeded" "#NULL.base, #NULL.offset := 0, 0;#valid := #valid[0 := false];havoc main_#res;havoc main_#t~nondet8, main_#t~malloc9.base, main_#t~malloc9.offset, main_~array_size~5, main_~a~5.base, main_~a~5.offset;main_~array_size~5 := main_#t~nondet8;havoc main_#t~nondet8;" "964#unseeded")
	},
	returnTransitions = {
	}
);
